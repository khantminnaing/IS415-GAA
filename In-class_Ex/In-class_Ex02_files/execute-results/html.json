{
  "hash": "b1d116a540399d91c3a32df998bb16f7",
  "result": {
    "markdown": "---\ntitle: \"In-Class Exercise 02\"\ndescription: |\n R for Geospatial Data Science\nauthor:\n  - name: Khant Min Naing\n    url: https://www.linkedin.com/in/khantminnaing/\ndate: 01-12-2024\ndate-modified: \"last-modified\"\ncategories:\n  - In-Class Exercise\n  - R\n  - sf\n  - lubridate\n  - grab-posisi\nformat:\n  html:  \n    #code-fold: true\n    code-summary: \"Show the code\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\noutput:\n  distill::distill_article:\n    toc: true\n    self_contained: false\n---\n\n\n## 1.0 Overview\n\nIn this exercise, we will\n\n## 2.0 Importing Packages\n\nBefore we start the exercise, we will need to import necessary R packages first. We will use the following packages:\n\n-   [`arrow`](https://arrow.apache.org/docs/r/) for reading and writing Apache Parquet files\n\n-   [`lubridate`](https://lubridate.tidyverse.org/) for tackling with temporal data (dates and times)\n\n-   [`tidyverse`](https://www.tidyverse.org/) for manipulating and wrangling data, as well as, implementing data science functions\n\n-   [`tmap`](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html) for creating and visualizing thematic maps\n\n-   [`sf`](https://r-spatial.github.io/sf/) for handling geospatial data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(arrow,lubridate,tidyverse,tmap,sf)\n```\n:::\n\n\n## 3.0 Importing Datasets into R Environment\n\n### 3.1 Datasets\n\nIn this exercise, we will use [Grab-Posisi](https://engineering.grab.com/grab-posisi) dataset, which is a comprehensive GPS trajectory dataset for car-hailing services in Southeast Asia.\n\n![](images/grab%20posisi.png)\n\nApart from the time and location of the object, GPS trajectories are also characterised by other parameters such as speed, the headed direction, the area and distance covered during its travel, and the travelled time. Thus, the trajectory patterns from users GPS data are a valuable source of information for a wide range of urban applications, such as solving transportation problems, traffic prediction, and developing reasonable urban planning.\n\n### 3.1 Importing Grab-Posisi Dataset\n\nEach trajectory in Grab-Posisi dataset is serialised in a file in Apache Parquet format.\n\n-   Firstly, we will use `read_parquet` function from `arrow` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_parquet('~/IS415-GAA/data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet')\ndf_1 <- read_parquet('~/IS415-GAA/data/GrabPosisi/part-00001-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet')\n```\n:::\n\n\n-   Next, we will use `head()` function to quickly scan through the data columns and values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  trj_id driving_mode osname  pingtimestamp rawlat rawlng speed bearing accuracy\n  <chr>  <chr>        <chr>           <int>  <dbl>  <dbl> <dbl>   <int>    <dbl>\n1 70014  car          android    1554943236   1.34   104.  18.9     248      3.9\n2 73573  car          android    1555582623   1.32   104.  17.7      44      4  \n3 75567  car          android    1555141026   1.33   104.  14.0      34      3.9\n4 1410   car          android    1555731693   1.26   104.  13.0     181      4  \n5 4354   car          android    1555584497   1.28   104.  14.8      93      3.9\n6 32630  car          android    1555395258   1.30   104.  23.2      73      3.9\n```\n:::\n:::\n\n\nFrom the result above, we can see that the dataset includes a total of 9 columns as follows:\n\n| Column Name   | Data Type | Remark                   |\n|---------------|-----------|--------------------------|\n| trj_id        | chr       | Trajectory ID            |\n| driving_mode  | chr       | Mode of Driving          |\n| osname        | chr       |                          |\n| pingtimestamp | int       | Data Recording Timestamp |\n| rawlat        | num       | Latitude Value (WGS-84)  |\n| rawlng        | num       | Longitude Value (WGS-84) |\n| speed         | num       | Speed                    |\n| bearing       | int       | Bearing                  |\n| accuracy      | num       | Accuracy                 |\n\nFrom the above table, it is seen that the `pingtimestamp` is recorded as `int`. We need to convert this data to proper datetime format to derive meaningful temporal insights of the data. To do so, we will use `as_datetime()` function from `lubridate` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$pingtimestamp <- as_datetime(df$pingtimestamp)\n```\n:::\n\n\n### 3.2 Extracting Trip Starting Locations and Temporal Data Values\n\nAfter loading the Grab-Posisi dataset, we will extract features that we want to use for analysis. Firstly, we will extract trip starting locations for all trajectories in the dataset and save it into a new df called `origin_df`.\n\nAlso, we are interested to derive useful temporal data such as day of the week, hour, and yy-mm-dd. To do so, we will use the following functions from `lubridate` package, and add the newly derived values as new columns to `origin_df`.\n\n-   `wday`: allows us to get days component of a date-time\n\n-   `hour`: allows us to get hours component of a date-time\n\n-   `mday`: allows us to parse dates with year, month, and day components\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_df <- df %>%\n  group_by(trj_id) %>%\n  arrange(pingtimestamp) %>%\n  filter(row_number()==1) %>% \n  mutate(weekday = wday(pingtimestamp,\n                       label=TRUE,\n                       abbr=TRUE),\n         starting_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\n### 3.3 Extracting Trip Ending Locations and Temporal Data Values\n\nSimilar to what we did in previous session, we are also interested to extract trip ending locations and associated temporal data into a new df called `destination_df`. We will use the same functions from previous session here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndestination_df <- df %>%\n  group_by(trj_id) %>%\n  arrange(desc(pingtimestamp)) %>%\n  filter(row_number()==1) %>% \n  mutate(weekday = wday(pingtimestamp,\n                       label=TRUE,\n                       abbr=TRUE),\n         starting_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\n::: {.callout-warning title=\"Reflection\"}\n`arrange()` function sort the timestamps in ascending order by default. Hence, for `destination_df`, we use `arrange(desc())` argument to sort the timestamps in descending order\n:::\n\n### 3.4 Saving R Objects in RDS Format\n\nRDS (R Data Serialization) files are **a common format for saving R objects in RStudio**, and they allow us to preserve the state of an object between R sessions. Saving R object as an RDS file in R can be useful for sharing our work with others, replicating our analysis, or simply storing our work for later use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(origin_df, \"../data/rds/origin_df.rds\")\nwrite_rds(destination_df, \"../data/rds/destination_df.rds\")\n```\n:::\n\n\n### 3.4 Importing RDS Objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_df <- read_rds(\"../data/rds/origin_df.rds\")\ndestination_df <- read_rds(\"../IS415-GAA/data/rds/destination_df.rds\")\n```\n:::\n",
    "supporting": [
      "In-class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}