{
  "hash": "50a48777672db213bd1d24290656e3dc",
  "result": {
    "markdown": "---\ntitle: \"Spatial Econometric Interaction Modelling\"\nauthor: \n - name: Khant Min Naing\n   url: https://www.linkedin.com/in/khantminnaing/\ndate: 03-09-2024\ndate-modified: \"last-modified\"\ncategories:\n  - R\n  - spflow\nformat:\n  html:  \n    code-summary: \"Show the code\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\noutput:\n  distill::distill_article:\n    toc: true\n    self_contained: false\n---\n\n\n# **Home-to-work commuting flows within the municipalities around Paris**\n\n## 1.0 Overview\n\nThis exercise uses `spflow` package for modeling spatial interactions using the example of home-to-work commuting flows. We will use information on the 71 municipalities that are located closest to the center of Paris. This data is contained in the package and was originally diffused by the French National Institutes of Statistics and Economic Studies (INSEE), and of Geographic and Forest Information (IGN).\n\n## 2.0 Importing Packages and Datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(Matrix,sf,spdep,tmap)\n#devtools::install_github(\"LukeCe/spflow\")\nlibrary(spflow)\n\ndata(\"paris10km_municipalities\")\ndata(\"paris10km_commuteflows\")\n```\n:::\n\n\nEach municipality is identified by a unique id. Additionally, we have information on the population, the median income and the number of companies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparis10km_municipalities\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 71 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.199785 ymin: 48.76454 xmax: 2.499719 ymax: 48.95192\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   ID_MUN POPULATION MED_INCOME NB_COMPANY AREA                       geometry\n1   75101      17100   31842.56      14333  182 MULTIPOLYGON (((2.344559 48...\n2   75102      22390   30024.50      14478   99 MULTIPOLYGON (((2.347832 48...\n3   75103      35991   30988.00      10696  117 MULTIPOLYGON (((2.350091 48...\n4   75104      27769   30514.67       7412  160 MULTIPOLYGON (((2.344559 48...\n5   75105      60179   32950.00      10290  252 MULTIPOLYGON (((2.344559 48...\n6   75106      43224   38447.69      10620  215 MULTIPOLYGON (((2.344559 48...\n7   75107      57092   41949.00      12602  412 MULTIPOLYGON (((2.320777 48...\n8   75108      38749   39774.00      52237  386 MULTIPOLYGON (((2.327121 48...\n9   75109      59474   32771.00      23687  218 MULTIPOLYGON (((2.325762 48...\n10  75110      94474   25154.00      23996  288 MULTIPOLYGON (((2.364678 48...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(paris10km_municipalities)+\n  tm_fill(\"ID_MUN\", \n          palette = c(\"#57bfc0\",\"#7977f3\", \"#ce77b4\",\"#f67774\",\"#f89974\", \"#f8d673\",\"#f9f777\")) +\n  tm_borders(col = \"white\")+\n  tm_layout(main.title = \"Paris Municipalities\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            main.title.fontface = \"bold\",\n            legend.show = FALSE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n  tm_grid(labels.size = 1,alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\nThere are three different neighborhood matrices that can be used to describe the connectivity between the municipalities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nold_par <- par(mfrow = c(1, 3), mar = c(0,0,1,0))\n\nmid_points <- suppressWarnings({\n    st_point_on_surface(st_geometry(paris10km_municipalities))})\n\nparis10km_nb <- list(\n  \"by_contiguity\" = spdep::poly2nb(paris10km_municipalities),\n  \"by_distance\" = spdep::dnearneigh(mid_points,d1 = 0, d2 = 5),\n  \"by_knn\" = spdep::knn2nb(knearneigh(mid_points,3))\n)\n\nplot(st_geometry(paris10km_municipalities))\nplot(paris10km_nb$by_contiguity, mid_points, add = T, col = rgb(0,0,0,alpha=0.5))\ntitle(\"Contiguity\") \n\nplot(st_geometry(paris10km_municipalities))\nplot(paris10km_nb$by_distance,mid_points, add = T, col = rgb(0,0,0,alpha=0.5)) \ntitle(\"Distance\") \n\nplot(st_geometry(paris10km_municipalities))\nplot(paris10km_nb$by_knn, mid_points, add = T, col = rgb(0,0,0,alpha=0.5))\ntitle(\"3 Nearest Neighbors\") \n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-4-1.png){width=960}\n:::\n\n```{.r .cell-code}\npar(old_par)\n```\n:::\n\n\nFinally, there is data on the size of the commuting flows and the distance between all pairs of municipalities\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(paris10km_commuteflows)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID_ORIG ID_DEST DISTANCE COMMUTE_FLOW\n1   75101   75101    0.000   3771.23556\n2   75101   75102  786.743    294.76899\n3   75101   75103 1729.063     71.25116\n4   75101   75104 1807.294     99.38468\n5   75101   75105 2266.598     98.88915\n6   75101   75106 1512.870     65.15406\n```\n:::\n:::\n\n\n## **3.0 Modeling Spatial Interactions with** `spflow()`\n\nThe **spflow** package builds on the idea that flows correspond to pairwise interactions between the nodes of an origin network with the nodes of a destination network.\n\nIn our example, the origin and destination networks are the same because every municipality is both an origin and destination of a flow.\n\nTo estimate the model efficiently, the **spflow** package uses moment-based estimation methods, that exploit the relational structure of flow data. This avoids duplication arising from the fact that each municipality is at the origin and destination of many flows. For more details on the model and the estimation methods see LeSage (2008), Dargel (2021) and Dargel (2022).\n\n### **3.1 Creating `spflow network`** objects\n\nTo describe the nodes of a network the package provides `spflow_network-class` that combines attributes of the nodes with the chosen network structure. For our model we choose the contiguity based neighborhood structure.\n\nFirst, we will create an object `paris10km_net` using `sp_network_nodes()` function. This object represents the nodes in our network. Each municipality will serve as a node.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparis10km_net <-  spflow_network(\n  id_net = \"paris\",\n  node_neighborhood = nb2mat(paris10km_nb$by_contiguity),\n  node_data = paris10km_municipalities,\n  node_key_column = \"ID_MUN\")\n\nparis10km_net\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial network nodes with id: paris\n--------------------------------------------------\nNumber of nodes: 71\nAverage number of links per node: 5.239\nDensity of the neighborhood matrix: 7.38% (non-zero connections)\n\nData on nodes:\n    ID_MUN POPULATION MED_INCOME NB_COMPANY AREA COORD_X COORD_Y\n1    75101      17100   31842.56      14333  182    2.34   48.86\n2    75102      22390    30024.5      14478   99    2.34   48.87\n3    75103      35991      30988      10696  117    2.36   48.86\n4    75104      27769   30514.67       7412  160    2.36   48.85\n5    75105      60179      32950      10290  252    2.35   48.85\n6    75106      43224   38447.69      10620  215    2.33   48.85\n---    ---        ---        ---        ---  ---     ---     ---\n66   94046      54186      24329       3385  537    2.44    48.8\n67   94067      21846   31559.38       1763   90    2.42   48.84\n68   94069      14870   25790.65        957  144    2.43   48.82\n69   94076      56504      19447       2690  529    2.36   48.79\n70   94080      49831      30798       4655  191    2.43   48.85\n71   94081      88102    17860.5       4467 1166     2.4   48.79\n```\n:::\n:::\n\n\nNext, we will create an object `paris10km_pairs` using `sp_network_pair()` function. This object represents the edges in our network. Each origin-destination record from `paris10km_commuteflows` will serve as an edge.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparis10km_net_pairs <-  spflow_network_pair(\n  id_orig_net = \"paris\",\n  id_dest_net = \"paris\",\n  pair_data = paris10km_commuteflows,\n  orig_key_column = \"ID_ORIG\",\n  dest_key_column = \"ID_DEST\")\nparis10km_net_pairs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial network pair with id: paris_paris\n--------------------------------------------------\nOrigin network id: paris (with 71 nodes)\nDestination network id: paris (with 71 nodes)\nNumber of pairs: 5041\nCompleteness of pairs: 100.00% (5041/5041)\n\nData on node-pairs:\n     ID_DEST ID_ORIG DISTANCE COMMUTE_FLOW\n1      75101   75101        0      3771.24\n2      75102   75101   786.74       294.77\n3      75103   75101  1729.06        71.25\n4      75104   75101  1807.29        99.38\n5      75105   75101   2266.6        98.89\n6      75106   75101  1512.87        65.15\n---      ---     ---      ---          ---\n5036   94046   94081  3742.08       218.66\n5037   94067   94081  6105.73        60.28\n5038   94069   94081  4535.03       102.04\n5039   94076   94081  2567.25      1067.62\n5040   94080   94081  7277.43       120.11\n5041   94081   94081        0      9257.91\n```\n:::\n:::\n\n\nThe function `spflow_network_multi()` combines information on the nodes and the node-pairs and also ensures that both data sources are consistent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparis10km_multinet <- spflow_network_multi(paris10km_net,paris10km_net_pairs)\nparis10km_multinet\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCollection of spatial network nodes and pairs\n--------------------------------------------------\nContains 1 spatial network nodes  \n    With id :  paris\nContains 1 spatial network pairs  \n    With id :  paris_paris\n\nAvailability of origin-destination pair information:\n\n ID_ORIG_NET ID_DEST_NET ID_NET_PAIR COMPLETENESS   C_PAIRS C_ORIG C_DEST\n       paris       paris paris_paris      100.00% 5041/5041  71/71  71/71\n```\n:::\n:::\n\n\nGiven the information on origins, destinations and OD pairs we can use the [`spflow_map()`](https://lukece.github.io/spflow/reference/spflow_map.html) method for a simple geographic representation of the largest flows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(paris10km_municipalities$geometry) \nspflow_map(\n  paris10km_multinet,\n  flow_var = \"COMMUTE_FLOW\",\n  add = TRUE,         \n  legend_position = \"bottomleft\",\n  filter_lowest = .95,\n  remove_intra = TRUE,\n  cex = 1)\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\nBefore estimating a model we should investigate the correlation structure of the input data. The [`pair_cor()`](https://lukece.github.io/spflow/reference/pair_cor.html) method creates a correlation matrix, which we can represent using the [`cor_image()`](https://lukece.github.io/spflow/reference/cor_image.html). The formula is used clarify which variables should be included in the correlation matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor_formula <- log(1 + COMMUTE_FLOW) ~ . + P_(log( 1 + DISTANCE))\ncor_mat <- pair_cor(paris10km_multinet, spflow_formula = cor_formula, add_lags_x = FALSE)\n\ncolnames(cor_mat) <- paste0(substr(colnames(cor_mat),1,3),\"...\")\ncor_image(cor_mat)\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## 4.0 Estimation\n\nThe core function of the package is [`spflow()`](https://lukece.github.io/spflow/reference/spflow.html), which provides an interface to four different estimators of the spatial econometric interaction model.\n\n### 4.1 **Estimating with default values**\n\nEstimation with default settings requires two arguments: a `spflow_network_multi-class` and a `spflow_formula`. The `spflow_formula` specifies the model we want to estimate. In this example, the dependent variable is a transformation of commuting flows and we use the do- shortcut to indicate that all available variables should be included in the model. Using the defaults leads to the most comprehensive spatial interaction model, which includes spatial lags of the dependent variable, the exogenous variables and additional attributes for intra-regional observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_default <- spflow(\n  spflow_formula = log(1 + COMMUTE_FLOW) ~ . + P_(log( 1 + DISTANCE)),\n  spflow_networks = paris10km_multinet)\n\nresults_default\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_9)\nDependent variable: log(1 + COMMUTE_FLOW)\n\n--------------------------------------------------\nCoefficients:\n                        est     sd   t.stat  p.val\nrho_d                 0.439  0.016   27.834  0.000\nrho_o                 0.796  0.010   82.408  0.000\nrho_w                -0.372  0.020  -18.226  0.000\n(Intercept)          -0.158  0.073   -2.168  0.030\n(Intra)               6.179  0.296   20.908  0.000\nD_POPULATION          0.000  0.000    4.254  0.000\nD_POPULATION.lag1     0.000  0.000   -0.170  0.865\nD_MED_INCOME          0.000  0.000   -2.422  0.015\nD_MED_INCOME.lag1     0.000  0.000    6.300  0.000\nD_NB_COMPANY          0.000  0.000    2.437  0.015\nD_NB_COMPANY.lag1     0.000  0.000    2.542  0.011\nD_AREA                0.000  0.000    6.368  0.000\nD_AREA.lag1           0.000  0.000   -4.319  0.000\nO_POPULATION          0.000  0.000   22.902  0.000\nO_POPULATION.lag1     0.000  0.000   -5.740  0.000\nO_MED_INCOME          0.000  0.000    0.609  0.542\nO_MED_INCOME.lag1     0.000  0.000    0.192  0.848\nO_NB_COMPANY          0.000  0.000   -5.610  0.000\nO_NB_COMPANY.lag1     0.000  0.000    1.050  0.294\nO_AREA                0.000  0.000    6.278  0.000\nO_AREA.lag1           0.000  0.000   -4.951  0.000\nI_POPULATION          0.000  0.000   -3.538  0.000\nI_MED_INCOME          0.000  0.000   -8.722  0.000\nI_NB_COMPANY          0.000  0.000    4.787  0.000\nI_AREA               -0.001  0.000   -5.401  0.000\nP_log(1 + DISTANCE)      NA     NA       NA     NA\n\n--------------------------------------------------\nR2_corr: 0.9110008  \nObservations: 5041  \nModel coherence: Validated\n```\n:::\n:::\n\n\n### 4.2 **Adjusting the formula**\n\nWe can adjust how the exogenous variables are to be used by wrapping them into the `D_()`, `O_()`, `I_()` and `P_()` functions. The variables in `P_()` are used as OD pair features and those in `D_()`, `O_()` and `I_()` are used as destination, origin and intra-regional features. We can take advantage of the formula interface to specify transformations and expand factor variables to dummies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclog <- function(x) {\n  log_x <- log(x)\n  log_x - mean(log_x)\n}\n\nspflow_formula  <- \n  log(COMMUTE_FLOW + 1) ~\n  D_(log(NB_COMPANY) + clog(MED_INCOME)) +\n  O_(log(POPULATION) + clog(MED_INCOME)) +\n  I_(log(POPULATION)) +\n  P_(log(DISTANCE + 1))\n\nresults_mle  <- spflow(\n  spflow_formula,\n  paris10km_multinet)\nresults_mle\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_9)\nDependent variable: log(COMMUTE_FLOW + 1)\n\n--------------------------------------------------\nCoefficients:\n                            est     sd   t.stat  p.val\nrho_d                     0.213  0.019   11.150  0.000\nrho_o                     0.726  0.012   59.127  0.000\nrho_w                    -0.022  0.024   -0.904  0.366\n(Intercept)              -0.809  0.289   -2.796  0.005\n(Intra)                   6.829  0.893    7.646  0.000\nD_log(NB_COMPANY)         0.285  0.016   18.075  0.000\nD_log(NB_COMPANY).lag1   -0.220  0.022  -10.099  0.000\nD_clog(MED_INCOME)       -0.343  0.051   -6.663  0.000\nD_clog(MED_INCOME).lag1   0.509  0.073    6.959  0.000\nO_log(POPULATION)         0.763  0.021   36.230  0.000\nO_log(POPULATION).lag1   -0.649  0.031  -21.085  0.000\nO_clog(MED_INCOME)       -0.081  0.050   -1.631  0.103\nO_clog(MED_INCOME).lag1  -0.006  0.066   -0.094  0.925\nI_log(POPULATION)        -0.422  0.082   -5.178  0.000\nP_log(DISTANCE + 1)      -0.073  0.022   -3.257  0.001\n\n--------------------------------------------------\nR2_corr: 0.9207571  \nObservations: 5041  \nModel coherence: Validated\n```\n:::\n:::\n\n\n### **4.3 Fine-grained control with `spflow_control()`**\n\nMore fine-grained adjustments are possible via the `spflow_control` argument. Here we change the estimation method and the way we want to model the spatial autoregression in the flows. To use spatial lags only for certain variables, we need to specify them as a second formula.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdm_formula <- ~\n  O_(log(POPULATION) + clog(MED_INCOME)) +\n  D_(log(NB_COMPANY) + clog(MED_INCOME))\n\ncntrl <- spflow_control(\n  estimation_method = \"mcmc\",\n  sdm_variables = sdm_formula,\n  model = \"model_7\")\n\nresults_mcmc  <- spflow(\n  spflow_formula,\n  paris10km_multinet,\n  estimation_control = cntrl)\n\nresults_mcmc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--------------------------------------------------\nSpatial interaction model estimated by: MCMC  \nSpatial correlation structure: SDM (model_7)\nDependent variable: log(COMMUTE_FLOW + 1)\n\n--------------------------------------------------\nCoefficients:\n                            est  quant_025  quant_975     sd\nrho_d                     0.201      0.171      0.229  0.014\nrho_o                     0.721      0.698      0.745  0.012\n(Intercept)              -0.772     -1.349     -0.226  0.284\n(Intra)                   6.816      5.045      8.553  0.903\nD_log(NB_COMPANY)         0.291      0.261      0.320  0.016\nD_log(NB_COMPANY).lag1   -0.231     -0.267     -0.194  0.019\nD_clog(MED_INCOME)       -0.348     -0.448     -0.249  0.051\nD_clog(MED_INCOME).lag1   0.511      0.366      0.649  0.071\nO_log(POPULATION)         0.774      0.741      0.806  0.017\nO_log(POPULATION).lag1   -0.664     -0.710     -0.617  0.024\nO_clog(MED_INCOME)       -0.083     -0.185      0.017  0.051\nO_clog(MED_INCOME).lag1  -0.004     -0.133      0.125  0.066\nI_log(POPULATION)        -0.420     -0.581     -0.259  0.083\nP_log(DISTANCE + 1)      -0.070     -0.112     -0.026  0.022\n\n--------------------------------------------------\nR2_corr: 0.9205607  \nObservations: 5041  \nModel coherence: Validated\n```\n:::\n:::\n\n\n### **4.4 Visualisations to diagnose the fit**\n\nCalling `plot(results_mcmc)` would create a whole sequence of graphics that allow to diagnose the fit. Here we concentrate on a selection of these graphics. The pairwise correlations of the model data show, for example, that the residuals and their spatial lags are not correlated with the explanatory variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_corr <- pair_cor(results_mcmc)\ncolnames(res_corr) <- substr(colnames(res_corr),1,3)\ncor_image(res_corr)\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nWe can also create Moran scatter plots to check whether the residuals still exhibit spatial autocorrelation with respect to the three potential neighborhood matrices $W_d$, $W_o$, & $W_w$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nold_par <- par(mfrow = c(1, 3), mar = c(2,2,2,2))\nspflow_moran_plots(results_mcmc)\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(old_par)\n```\n:::\n\n\nA quick investigation of the 2% residuals with largest magnitude reveals that long distances seem to be predicted with lower precision.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(paris10km_municipalities$geometry)\nspflow_map(\n  results_mcmc,\n  add = TRUE,\n  legend_position = \"bottomleft\",\n  filter_lowest = .98, # concentrate on the 2% largest (in magnitude)\n  cex = 1) \n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(paris10km_municipalities$geometry)\nspflow_map(\n  results_mcmc,\n  flow_type = \"fitted\",\n  add = TRUE,\n  legend_position = \"bottomleft\",\n  filter_lowest = .98, # concentrate on the 2% largest (in magnitude)\n  cex = 1) \n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(paris10km_municipalities$geometry)\nspflow_map(\n  results_mcmc,\n  flow_type = \"actual\",\n  add = TRUE,\n  legend_position = \"bottomleft\",\n  filter_lowest = .98, # concentrate on the 2% largest (in magnitude)\n  cex = 1) \n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\nLooking at the relation between the distances and the error confirms this impression. A more complex model could account for the increasing variance by weighting the observations during the estimation. This could be achieved using the `weight_variable` option in [`spflow_control()`](https://lukece.github.io/spflow/reference/spflow_control.html), but is left out in this introductory vignette.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(log(dat(paris10km_multinet, \"paris_paris\")[[\"DISTANCE\"]] + 1), resid(results_mcmc))\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## 5.0 Evaluating t**he impact of changing the input data**\n\nFinally we can evaluate the impact certain characteristics have on the outcome. Here we look at a scenario where the population in the central municipality is increased by 10%. As this has diverse effects on all flows we will first look at an image of the effect matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncenter_mun <- \"75101\"\nchange_paris <- dat(paris10km_multinet, \"paris\")\nchange_paris <- change_paris[change_paris$ID_MUN == center_mun,]\nchange_paris[,\"POPULATION\"] <- change_paris[,\"POPULATION\"]*1.1\nchange_paris <- change_paris[,1:2] # keep the ID and the variable that changed\n\neffect_matrix <- predict_effect(\n  results_mcmc,                           # the model\n  new_dat = list(\"paris\" = change_paris), # changes in network \"paris\"\n  return_type = \"M\")                      # return in matrix form\n  \n# in the first row are those flows that go to the center\n# in the first column are those flows that start from the center\nimage(effect_matrix)\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\nHere we see that flows starting from the center increase and flows that start from neighbors of the center to the center decrease. All other effects are very small. We can then have a closer look at the flows that start from the center or go to it. Additionally we look at all the internal flows, which decrease for all municipalities except for the center.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cbind(\"FLOWS_FROM_CENTER\" = effect_matrix[,1], paris10km_municipalities[\"geometry\"]))\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cbind(\"FLOWS_TO_CENTER\" = effect_matrix[1,], paris10km_municipalities[\"geometry\"]))\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cbind(\"INTRA_FLOWS\" = diag(effect_matrix), paris10km_municipalities[\"geometry\"]))\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nWe can then look at the indirect effects on all flows that do not have the central municipality as origin or destination. To summarize these by total inflow and outflow we additionally set the internal flows to zero.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neffect_matrix2 <- effect_matrix\ndiag(effect_matrix2) <- effect_matrix2[1,] <- effect_matrix2[,1] <- 0\nplot(cbind(\"TOTAL_OUTFLOWS\" = rowSums(effect_matrix2), paris10km_municipalities[\"geometry\"]))\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cbind(\"TOTAL_INFLOWS\" = colSums(effect_matrix2), paris10km_municipalities[\"geometry\"]))\n```\n\n::: {.cell-output-display}\n![](spflow_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "spflow_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}