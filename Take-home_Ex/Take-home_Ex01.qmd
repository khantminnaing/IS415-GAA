---
title: "Take-Home Exercise 01: Spatial Point Patterns Analysis of Grab Trajectories in Singapore"
description: |
 Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore, implemented using spatstat package (Baddeley, Turner, and Rubak 2022) in R environment.
author:
  - name: Khant Min Naing
    url: https://www.linkedin.com/in/khantminnaing/
date: 01-12-2024
date-modified: "last-modified"
categories:
  - grab-posisi
  - spatial point patterns
  - spatstat
  - r
title-block-banner: true
format:
  html:  
    code-fold: true
    code-summary: "Show the code"
execute: 
  eval: true
  echo: true
  warning: false
output:
  distill::distill_article:
    toc: true
    self_contained: false
---

## 1.0 Introduction

Human mobility, the spatial-temporal dynamics of human movements, serves as a critical reflection of societal patterns and human behaviors. With the advancement and pervasiveness of Information and Communication Technologies (ICT) in our daily life, especially smart phone, a large volume of data related to human mobility have been collected. These data provide valuable insights into understanding how individuals and populations move within and between different geographical locations. By using appropriate GIS analysis methods, these data can turn into valuable inisghts for predicting future mobility trrends and developing more efficient and sustainable strategies for managing urban mobility.

In this study, I will apply **Spatial Point Patterns Analysis** methods to discover the geographical and spatio-temporal distribution of Grab hailing services locations in Singapore. In order to determine the geographical and spatio-temporal patterns of the Grab hailing services, I will develop traditional **Kernel Density Estimation (KDE)** and **Temporal Network Kernel Density Estimation (TNKDE)**. KDE layers will help identify the areas with high concentration of Grab hailing services, providing insights into the demand and popularity of these services in different parts of Singapore. TNKDE, on the other hand, will allow for analysis of how the distribution of Grab hailing services changes over time, revealing temporal patterns and trends in their usage. These spatial and spatio-temporal analyses will contribute to a better understanding of the dynamics and effectiveness of Grab's mobility services in Singapore.

## 2.0 Literature Review of Spatial Point Pattern Analysis 

Spatial point pattern analysis is concerned with description, statistical characterization, modeling and visulisation of point patterns over space and making inference about the process that could have generated an observed pattern (Boots & Getis, 1988,Rey et al., 2023; Pebesma & Bivand, 2023). According to this theory, empirical spatial distribution of points in our daily life are not controlled by sampling, but a result of an **underlying geographically-continuous process** (Rey et al., 2023). For example, an COVID-19 cluster did not happen by chance, but due to a spatial process of close-contact infection.

When analysing real-world spatial points, it is important to analyse whether the observed spatial points are randomly distributed or patterned due to a process or interaction (Floch et al., 2018). In "complete random\" distribution, points are located everywhere with the same probability and independently of each other. On the other hand, the spatial points can be clustered or dispersed due to an underlying point process. However, it is challenging to use heuristic observation and intuitive interpretation to detect whether a spatial point pattern exists (Floch et al., 2018). Hence, spatial point pattern analysis can be used to detect the spatial concentration or dispersion phenomena.

![](images/Screenshot 2024-01-16 at 10.56.45 PM.png)

When analysing and interpreting the properties of a point pattern, these properties can be categorized into two: (a) first-order properties and (b) second-order properties (Yuan et al., 2020; Gimond, 2023). First-order properties concern with the characteristics of individual point locations and their variations of their density across space (Gimond, 2023). Under this conception, observations vary from point to point due to changes in the underlying property. Second-order properties focus on not only individual points, but also the interactions between points and their influences on one another (Gimond, 2023). Under this conception, observations vary from place to place due to interaction effects between observations. First-order properties of point patterns are mostly addressed by density-based techniques, such as kernel density, whereas, distance-based techniques, such nearest neighbour index and K-functions, are often used to analyse second-order properties since they take into account the distance between point pairs (Yuan et al., 2020; Gimond, 2023).

## 3.0 Importing Packages

Before we start the exercise, we will need to import necessary R packages first. We will use the following packages:

-   **spatstat**: A package for statistical analysis of spatial data, specifically Spatial Point Pattern Analysis.

-   **rgdal**: Used to import geospatial data and output as spatial class objects from **sp** package

-   **maptools**,**ggplot2**,**ggthemes**,**plotly**: Packages used to plot interactive visualisations summary statistics and KDE layers

```{r}
pacman::p_load(arrow,lubridate,tidyverse,tmap,sf)
```

## 4.0 Importing Datasets into R Environment

### 4.1 Datasets

In this exercise, we will use [Grab-Posisi](https://engineering.grab.com/grab-posisi) dataset, which is a comprehensive GPS trajectory dataset for car-hailing services in Southeast Asia.

Apart from the time and location of the object, GPS trajectories are also characterised by other parameters such as speed, the headed direction, the area and distance covered during its travel, and the travelled time.Â Thus, the trajectory patterns from users GPS data are a valuable source of information for a wide range of urban applications, such as solving transportation problems, traffic prediction, and developing reasonable urban planning.

### 4.2 Importing Grab-Posisi Dataset

Each trajectory in Grab-Posisi dataset is serialised in a file in Apache Parquet format.

-   Firstly, we will use `read_parquet` function from `arrow` package

```{r}
df <- read_parquet('~/IS415-GAA/data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet')
df_1 <- read_parquet('~/IS415-GAA/data/GrabPosisi/part-00001-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet')
```

-   Next, we will use `head()` function to quickly scan through the data columns and values.

```{r}
head(df)
```

From the result above, we can see that the dataset includes a total of 9 columns as follows:

| Column Name   | Data Type | Remark                   |
|---------------|-----------|--------------------------|
| trj_id        | chr       | Trajectory ID            |
| driving_mode  | chr       | Mode of Driving          |
| osname        | chr       |                          |
| pingtimestamp | int       | Data Recording Timestamp |
| rawlat        | num       | Latitude Value (WGS-84)  |
| rawlng        | num       | Longitude Value (WGS-84) |
| speed         | num       | Speed                    |
| bearing       | int       | Bearing                  |
| accuracy      | num       | Accuracy                 |

From the above table, it is seen that the `pingtimestamp` is recorded as `int`. We need to convert this data to proper datetime format to derive meaningful temporal insights of the data. To do so, we will use `as_datetime()` function from `lubridate` package.

```{r}
df$pingtimestamp <- as_datetime(df$pingtimestamp)
```

### 5.2 Extracting Trip Starting Locations and Temporal Data Values

After loading the Grab-Posisi dataset, we will extract features that we want to use for analysis. Firstly, we will extract trip starting locations for all trajectories in the dataset and save it into a new df called `origin_df`.

Also, we are interested to derive useful temporal data such as day of the week, hour, and yy-mm-dd. To do so, we will use the following functions from `lubridate` package, and add the newly derived values as new columns to `origin_df`.

-   `wday`: allows us to get days component of a date-time

-   `hour`: allows us to get hours component of a date-time

-   `mday`: allows us to parse dates with year, month, and day components

```{r}
#| eval: false
origin_df <- df %>%
  group_by(trj_id) %>%
  arrange(pingtimestamp) %>%
  filter(row_number()==1) %>% 
  mutate(weekday = wday(pingtimestamp,
                       label=TRUE,
                       abbr=TRUE),
         starting_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
```

### 3.3 Extracting Trip Ending Locations and Temporal Data Values

Similar to what we did in previous session, we are also interested to extract trip ending locations and associated temporal data into a new df called `destination_df`. We will use the same functions from previous session here.

```{r}
#| eval: false
destination_df <- df %>%
  group_by(trj_id) %>%
  arrange(desc(pingtimestamp)) %>%
  filter(row_number()==1) %>% 
  mutate(weekday = wday(pingtimestamp,
                       label=TRUE,
                       abbr=TRUE),
         starting_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
```

::: {.callout-warning title="Reflection"}
`arrange()` function sort the timestamps in ascending order by default. Hence, for `destination_df`, we use `arrange(desc())` argument to sort the timestamps in descending order
:::

### 3.4 Saving R Objects in RDS Format

RDS (R Data Serialization) files are **a common format for saving R objects in RStudio**, and they allow us to preserve the state of an object between R sessions. Saving R object as an RDS file in R can be useful for sharing our work with others, replicating our analysis, or simply storing our work for later use.

```{r}
#| eval: false
write_rds(origin_df, "../data/rds/origin_df.rds")
write_rds(destination_df, "../data/rds/destination_df.rds")
```

### 3.4 Importing RDS Objects

```{r}
#| eval: false
origin_df <- read_rds("../data/rds/origin_df.rds")
destination_df <- read_rds("../IS415-GAA/data/rds/destination_df.rds")
```

## References

1\. Rey, S.J., Arribas-Bel, D., Wolf, L.J.: Point Pattern Analysis. In: Geographic Data Science with python. pp. 185--219. CRC Press, Boca Raton etc. (2023).
