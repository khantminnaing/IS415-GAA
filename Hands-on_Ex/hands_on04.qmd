---
title: "Hands-On Exercise 04"
description: |
 Spatial Weights and Applications
author:
  - name: Khant Min Naing
    url: https://www.linkedin.com/in/khantminnaing/
date: 01-26-2024
date-modified: "last-modified"
categories:
  - In-Class Exercise
  - R
  - sf
format:
  html:  
    code-summary: "Show the code"
execute: 
  eval: true
  echo: true
  warning: false
output:
  distill::distill_article:
    toc: true
    self_contained: false
---

# Spatial Weights and Applications

## 1.0 Overview

Spatial weights are a key component in any cross-sectional analysis of spatial dependence. They are an essential element in the construction of spatial autocorrelation statistics, and provide the means to create spatially explicit variables, such as spatially lagged variables and spatially smoothed rates.

Computing spatial weight is an essential step toward measuring the strength of the spatial relationships between objects. In this exercise, the basic concept of spatial weight will be introduced. This is followed by a discussion of methods to compute spatial weights.

Particularly, we will explore using **spdep**, an R package specially designed for spatial weight analysis.

## 2.0 Importing Packages

In this hands-on exercise, we will use the following R package:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   **spdep**,

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

-   **tidyverse**

-   **knitr**

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 3.0 Importing Datasets to R Environment

In this exercise, we will use the following datasets:

-   `Hunan` county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   `Hunan_2012.csv` This csv file contains selected Hunan\'s local development indicators in 2012.

### 3.1 Importing Geospatial Data

In this section, `st_read()` of **sf** package will be used to import the three geospatial data sets mentioned in previous section into R environment.

```{r}
hunan <- st_read(dsn = "../data/geospatial", 
                 layer = "Hunan")
```

### 3.1 Importing Aspatial Data

In this section, `read_csv()` of **sf** package will be used to import the csv file into R environment. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("../data/aspatial/Hunan_2012.csv")
hunan2012
```

## 4.0 Geospatial Data Wrangling

### 4.1. Performing Relational Joint

In previous section, we have imported a shapefile `hunan` representing the geographical boundaries of Hunan and a dataframe `hunan2012` which contains the attribute fields corresponding to counties in `Hunan`.

The next step in our analysis involves updating the attribute table of the `hunan` shapefile with the values from `hunan2012`.

Hence, we will need to update the attribute table of `Hunan` by using `left_join()` of dplyr package. This function effectively merges the two datasets, ensuring that each county\'s geographical data is accurately linked with its corresponding attribute data from the **`hunan2012`** dataframe.

```{r}
hunan <- left_join(hunan,hunan2012, join_by(County))%>%
  select(1:4, 7, 15)
```

## 5.0 Exploratory Spatial Data Analysis

In this section, we will carry out exploratory spatial data anlysis.

### 5.1 **Visualising Regional Development Indicator**

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
#| fig-width: 10

basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.4)

gdppc <- qtm(hunan, "GDPPC", fill.palette = "plasma")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 6.0 **Computing Contiguity Spatial Weights**

In this section, we will explore how to use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area.

The **`poly2nb()`** function accepts an argument named **`queen`**, which can be set to either **`TRUE`** or **`FALSE`**. This argument plays a pivotal role in determining the criteria used for identifying neighboring regions. If the **`queen`** argument is not explicitly specified, the function defaults to **`TRUE`** and the function will generate a list of first-order neighbors using the Queen\'s contiguity criteria.

### 6.1 **Computing QUEEN contiguity based neighbours**

We will start out by computing Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

::: {.callout-tip}
The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.
:::

For each polygon in our polygon object, wm_q lists all neighboring polygons. To see the neighbors for the first polygon in the object, we can just use the following code chunk:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class. We can retrive the county name of Polygon ID=1 by using the code chunk below:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

To reveal the county names of the five neighboring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We can retrieve the GDPPC of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen\'s method are 20981, 34592, 24473, 21311 and 22879 respectively.

You can display the complete weight matrix by using `str()` function.

```{r}
str(wm_q)
```

### 6.2 **Computing ROOK contiguity based neighbours**

In previous section, we have created neighbours based on QUEEN contiguity. In this section, we will try ROOK contiguity to create another set of neighbours which we will call `wm_r`.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbours.\

### 6.3 Visualising Contiguity Weights

A connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running `st_centroid()` on the sf object. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column. We will be using `map_dbl` variation of map from the **purrr** package.

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation `[[]]`and `1`. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with `[[2]]`.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

Then, we will check the first few observations to see if the coordinates are formatted properly.

```{r}
head(coords)
```

Once we have extracted the coordinates of the centroid of each map unit, we will go ahead and plot neighbours maps.

#### 6.3.1 Plotting QUEEN contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "grey")
```

#### 6.3.2 Plotting ROOK contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "grey")
```

#### 6.3.2 Plotting QUEEN and ROOK contiguity based neighbours map

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "grey")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "grey")
```

## 7.0 Computing Distance Based Neighbours

In this section, we will explore how to derive distance-based weight matrices by using [`dnearneigh()`](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### 7.1 Determining the Cut-off Distance

Firstly, we need to determine the upper limit for distance band. This can be achieved by following the steps below.

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [`knearneigh()`](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [`knn2nb()`](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [`nbdists()`](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**`unlist()`**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### 7.1 Computing **fixed distance weight matrix**

Now, we will compute the distance weight matrix by using `dnearneigh()` as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

::: {.callout-tip}
Average number of links: 3.681818\" in the output refers to the average number of neighboring regions each region has within the distance range of 0-62km. In the context of spatial analysis, a \"link\" is a connection between two regions that are considered neighbors based on the criteria we have set (in this case, distance of up to 62km).

So, an average of 3.681818 means that, on average, each region in our study area has about 3 to 4 neighboring regions within a distance of 62 units.
:::

Next, we will use `str()` to display the content of `wm_d62` weight matrix. This time, we will combine [`table()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [`card()`](https://r-spatial.github.io/spdep/reference/card.html) of **spdep** to display the matrix more neatly than simply using `str()`.

```{r}
table(hunan$County, card(wm_d62))
```

#### 7.1.1 Plotting fixed distance weight matrix

Next, we will plot the distance weight matrix by using the code chunk below.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="purple", length=0.08)

```

The purple lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively, we can plot both of them next to each other by using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="purple", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### 7.2 Computing **adaptive distance weight matrix**

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Similarly, we can display the content of the matrix by using `str()`.

```{r}
str(knn6)
```

Notably, it is observed that each county has exactly six neighbours.

#### 7.1.1 Plotting adaptive distance weight matrix

We can plot the adoptive weight matrix we obtained in previous section using the code chunk below.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "purple")
```

## 8.0 Spatial Weights based on Inverse Distance Weighted (IDW) method 

In this section, you will learn how to derive a spatial weight matrix based on Inversed Distance Weighted (IDW) method.

First, we will compute the distances between areas by using [`nbdists()`](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
```

### **8.1 Row-standardised weights matrix**

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=\"W\"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors\' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we\'ll stick with the style=\"W\" option for simplicity\'s sake but note that other more robust options are available, notably style=\"B\".

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

To see the weight of the first polygon\'s eight neighbors, we will use the code chunk below.

```{r}
rswm_q$weights[10]
```

::: {.callout-tip}
Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor\'s income will be multiplied by by its corresponding weight, (in this case, `0.125`) before being tallied.
:::

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
rswm_ids$weights[1]
summary(unlist(rswm_ids$weights))
```

## 9.0 Application of Spatial Weight Matrix

In this section, we will explore how to create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and

-   spatial window sum.

### 9.1 Spatial lag with row-standardised weights

Spatial lag with row-standardized weights is a measure that represents the average value of a given variable in the neighbouring regions, taking into account the weights assigned to each neighbour. The weights are usually row-standardized, meaning that the weights assigned to the neighbors of each region sum up to 1. This ensures that the spatial lag is not influenced by the number of neighbors a region has.

In this section, we will compute the average neighbor GDPPC value for each county.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Once the computation is done, we will retrieve the GDPPC values for the five neighboring regions of Anxiang county,as we have explored in section 6.1. To do so, first, we will save these 5 neighbours as `nb1` then will extract their respective GDPPC values.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can append the spatially lag GDPPC values onto `hunan` sf data frame through following steps.

-   First, we will create a variable called `lag.list`

-   Then, we will calculate the spatial lag value using `lag.listw()` function that takes in the spatial weights matrix `rswm_q`, and the GDPPC values for each region in the **`hunan`** dataframe, **`hunan$GDPPC.`**

-   Next, we will convert **`lag.list`** into a dataframe named **`lag.res`**

-   Finally, we will use **`left_join()`** function from the **`dplyr`** package to merge the `hunan` dataframe with `lag.res` dataframe.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

We will now look at a few values of the newly created column in `hunan` called `lag GDPPC`.

```{r}
head(hunan)
```

Next, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

```{r}
#| fig-width: 10

gdppc <- qtm(hunan, "GDPPC", fill.palette = "plasma")
lag_gdppc <- qtm(hunan, "lag GDPPC",fill.palette = "plasma")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 9.2 Spatial lag as a sum of neighbouring values

This spatial lag measure do not consider spatial weights, but simply sums up the values of the variable for all the neighbouring regions.

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use `glist` argument in the `nb2listw` function to explicitly assign these weights.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the binary weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

First, let us examine the result by using the code chunk below.

```{r}
head(lag_sum)
```

Next, we will append the `lag_sum GDPPC` field into `hunan` dataframe by using `left_join`.

```{r}
hunan <- left_join(hunan, lag.res)
```

Next, we will plot both the GDPPC and lag_sum GDPPC for comparison using the code chunk below.

```{r}
#| fig-width: 10

gdppc <- qtm(hunan, "GDPPC", fill.palette = "plasma")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC",fill.palette = "plasma")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 9.3 Spatial Window Average

Spatial window average is a measure that calculates the average value of a variable within a specified spatial window or area. The spatial window can be defined in various ways, such as a fixed distance from a point or a predefined geographic area.

In this section, we will use row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
```

This line of code modifies the **`wm_q`** neighbor list by including the diagonal element, resulting in the updated neighbor list **`wm_qs`**.

```{r}
wm_qs
```

Notice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909

Let us take a good look at the neighbour list of Anxiang county (area \[1\]) by using the code chunk below.

```{r}
wm_qs[[1]]
```

Notice that now \[1\] has six neighbours instead of five.

Now we obtain weights with `nb2listw()`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Next, the code chunk below will be used to append lag_window_avg GDPPC values onto `hunan` data.frame by using `left_join()` of **dplyr** package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Next, we will plot both the `lag_gdppc` and `w_avg_gdppc` maps next to each other for quick comparison.

```{r}
#| fig-width: 10

w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC", fill.palette = "plasma")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### 9.4 Spatial Window Sum

Similar to the spatial window average, this measure sums up the values of a variable within a specified spatial window. When calculating spatial window sum, we do not need to use row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with `lag.listw()` function.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Next, the code chunk below will be used to append w_sum GDPPC values onto `hunan` data.frame by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, `qtm()` of **tmap** package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

```{r}
#| fig-width: 10

w_sum_gdppc <- qtm(hunan, "w_sum GDPPC", fill.palette="plasma")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
