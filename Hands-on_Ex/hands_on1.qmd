---
title: "Hands-On Exercise 01"
description: |
 Geospatial Data Wrangling with R!
author:
  - name: Khant Min Naing
    url: https://www.linkedin.com/in/khantminnaing/
date: 01-07-2024
date-modified: "last-modified"
categories:
  - Hands-On Exercise
  - R
  - sf
  - ggplot2
output:
  distill::distill_article:
    code_folding: false
    toc: true
    self_contained: false
---

## 1.0 Overview

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

By the end of this hands-on exercise, you should acquire the following competencies:

-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,
-   importing geospatial data by using appropriate functions of **sf** package,
-   importing aspatial data by using appropriate function of **readr** package,
-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,
-   assigning or transforming coordinate systems by using using appropriate *sf* functions,
-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,
-   performing geoprocessing tasks by using appropriate functions of **sf** package,
-   performing data wrangling tasks by using appropriate functions of **dplyr** package and
-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

## 2.0 Setup

### 2.1 Data Acquisition

Data are key to data analytics including geospatial analytics. Hence, before analysing, I extract the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)
-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)
-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)
-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

### 2.2 Installing R-Packages

In this exercise, I will be using two R packages will be used. They are:

-   **sf** for importing, managing, and processing geospatial data, and
-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

Tidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:

-   **readr** for importing csv data,
-   **readxl** for importing Excel worksheet,
-   **tidyr** for manipulating data,
-   **dplyr** for transforming data, and
-   **ggplot2** for visualising data

I install the required packages using the code chunk below.

```{r, code_folding=FALSE}
pacman::p_load(sf, tidyverse)
```

## 3.0 Importing Geospatial Data into R

In this section, I will import the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,
-   `CyclingPath`, a line feature layer in ESRI shapefile format, and
-   `PreSchool`, a point feature layer in kml file format.

### 3.1 Importing polygon feature data in shapefile format

Dataset used: `MP14_SUBZONE_WEB_PL` File format: shapefile Data frame type: polygon feature

```{r, code_folding=FALSE}
mpsz = st_read(dsn = "Ex01/data/geospatial", 
               layer = "MP14_SUBZONE_WEB_PL")
cyclingpath = st_read(dsn = "Ex01/data/geospatial", 
                      layer = "CyclingPathGazette")
preschool = st_read("Ex01/data/geospatial/PreSchoolsLocation.kml")
```

From the output message, we can see that in our `mpsz` simple feature data frame, there are 323 multipolygon features, 15 fields and is in the **svy21** projected coordinates system.

### 3.2 Importing polyline feature data in shapefile form

Dataset used: `CyclingPathGazette` File format: shapefile Data frame type: line feature

```{r, code_folding=FALSE}
cyclingpath = st_read(dsn = "Ex01/data/geospatial", 
                      layer = "CyclingPathGazette")
```

From the output message, we can see that in our `cyclingpath` linestring feature data frame, there are 1625 linestring features, 2 fields and is in the **svy21** projected coordinates system.

### 3.3 Importing GIS data in kml format

Dataset used: `pre-schools-location-kml` File format: kml Data frame type: point feature

```{r, code_folding=FALSE}
preschool = st_read("Ex01/data/geospatial/PreSchoolsLocation.kml")
```

From the output message, we can see that in our `preschool` point feature data frame, there are 1359 linestring features, 2 fields and is in the **wgs84** projected coordinates system.

## 4.0 Importing + Converting Aspatial Data into R

For aspatial data, such as the `listings` Airbnb datset, there's an extra step in the importing process. We'll import it into a [tibble data frame](https://r4ds.had.co.nz/tibbles.html), then convert it into a simple feature data frame.

### 4.1 Importing aspatial data

Since our `listings` data set is in a csv file format, we'll use the *read_csv()* function from the **readr** package, like so:

```{r}
listings <- read_csv("Ex01/data/aspatial/listings.csv")
glimpse(listings) 
```

From the output message, we can see that in our `listing` tibble data frame, there are 4252 rows and 16 columns (not features and fields like in our simple data feature frame!) Take note of the `latitude` and `longitude` fields - we'll be using them in the next phase.

> Assumption: The data is in the **wgs84** Geographic Coordinate System on account of its latitude/longtitude fields.

### 4.2 Converting aspatial data

Now, let's convert our `listing` tibble data frame into a by using the *st_as_sf()* function from the **sf** package.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

This gives us the new simple feature data frame, `listings_sf`:

```{r}
glimpse(listings_sf)
```

> Note that a new column called `geometry` has been added! In addition, `longtitude` and `latitude` have both been dropped.

## 5.0 Checking the Content of A Simple Feature Data Frame

In this sub-section, you will learn different ways to retrieve information related to the content of a simple feature data frame.

### 5.1 Working with *st_geometry()*

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\$geom or mpsz\[\[1\]\], but the more general way uses *st_geometry()* as shown in the code chunk below.

```{r}
st_geometry(mpsz)

```

Notice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.

### 5.2 Working with *glimpse()*

Beside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find *glimpse()* of **dplyr**. very handy as shown in the code chunk below.

```{r}
glimpse(mpsz)
```

*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

### 5.3 Working with *head()*

Sometimes we would like to reveal complete information of a feature object, this is the job of [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R

```{r}
head(mpsz, n=5)  
```

> Note: One of the useful argument of *head()* is it allows user to select the numbers of record to display (i.e. the n argument).

## 6.0 Plotting the Geospatial Data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. I use *plot()* to quickly plot a sf object as shown in the code chunk below.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

## 7.0 Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, I project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.

### 7.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

To check the coordinate system of `mpsz` simple feature data frame, I use *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in SVY21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for SVY21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Now, let us check the CSR again by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is 3414 now.

### 7.2 Transforming the projection of preschool from wgs84 to svy21.

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

I take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r echo=FALSE}
st_geometry(preschool)
```

This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

Let us perform the projection transformation by using the code chunk below.

```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

> Note: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.

Next, let us display the content of preschool3414 sf data frame as shown below.

```{r echo=FALSE}
st_geometry(preschool3414)
```

Notice that it is in svy21 projected coordinate system now. Furthermore, if you refer to *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

## 8.0 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, I perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### 8.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

### 8.2 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Next, I calculate the density of pre-school by planning subzone.

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/index.html) package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 9.0 Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

Using ggplot2 method, I plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
