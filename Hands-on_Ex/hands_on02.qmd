---
title: "Hands-On Exercise 02"
description: |
 Thematic Mapping and GeoVisualisation with R
author:
  - name: Khant Min Naing
    url: https://www.linkedin.com/in/khantminnaing/
date: 01-12-2024
date-modified: "last-modified"
categories:
  - Hands-On Exercise
  - R
  - sf
  - tmap
output:
  distill::distill_article:
    code_folding: false
    toc: true
    self_contained: false
---

## 1.0 Overview

The main learning topics of today's hands-on exercise are thematic/choropleth mapping and other geospatial visualization techniques.

In general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.

Geovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human's most powerful information-processing abilities -- those of spatial cognition associated with our eye--brain vision system -- to be directly brought to bear.

In this exercise, we will explore how to plot functional and truthful choropleth maps by using `tmap` package.

The output of this exercise is to create maps like this.

![](images/example.png){width="1344"}

## 2.0 Importing Packages

Before we start the exercise, we will need to import necessary R packages first. We will use the following packages:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

Since **`readr`**, **`tidyr`** and **`dplyr`** are part of **`tidyverse`** package, we will only need to install and import `tidyverse`.

```{r}
pacman::p_load(sf, tmap, tidyverse)
devtools::install_github("thomasp85/patchwork")
library(patchwork)
```

## 3.0 Importing Datasets into R Environment

### 3.1 Datasets

In this exercise, we will use two datasets as follows:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### 3.2 Importing Geospatial Data into R

For geospatial data, we will use `st_read()` function of **sf** package to import shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn = "~/IS415-GAA/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
mpsz
```

### 3.3 Importing Aspatial (Attribute) Data into R

For aspatial datasets like *`respopagsex2011to2020.csv`,* we will import into Rstudio using `read_csv()` function of **readr** package.

```{r}
popdata <- read_csv("~/IS415-GAA/data/aspatial/respopagesextod2011to2020.csv")

```

## 4.0 Data Preparation and Wrangling

Before a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

### 4.1 Data Wrangling

In order to carry out necessary data wrangling and transformation, the following functions will be used:

-   `pivot_wider()` of **tidyr** package, and

-   `mutate()`, `filter()`, `group_by()` and `select()` of **dplyr** package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### 4.2 Joining Geospatial Data and Attribute Data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

Hence, we will standard the data values in these two fields.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, `left_join()` of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

## 5.0 Choropleth Mapping Geospatial Data Using *tmap*

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

### 5.1 **Plotting a choropleth map quickly by using *qtm()***

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.

```{r warning=FALSE, message=FALSE}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY",
    fill.palette ="Plasma")
```

### 5.2 **Plotting a choropleth map quickly by using *qtm()***

However, in real-life application, the quick choropleth map produced in the previous session may not be sufficient enough to properly visualize geospatial data. However, `tmap` packages allow us to customise and control how we design our choropleth maps. We will exploit **tmap**'s drawing elements to create a high quality cartographic choropleth map that includes more accurate and informative information.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Plasma",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Next, we will breakdown the different tmpa functions used to plot the additional elements in the map above.

### 5.3 Drawing a Base Map Using *tm_shape()*

The basic building block of **tmap** is `tm_shape()` followed by one or more layer elemments such as `tm_fill()` and `tm_polygons()`.

-   `tm_shape()` is used to define the input data (i.e *mpsz_pop2020*) and `tm_polygons()` is used to draw the planning subzone polygons.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

::: callout-note
Things to learn from the code chunk above:

-   tmap_mode() with "plot" option is used to produce a static map. For interactive mode, "view" option should be used.

-   fill argument is used to map the attribute (i.e. DEPENDENCY)
:::

### 5.4 Drawing a Choropleth Map Using *tm_polygons()*

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to `tm_polygons()`.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

::: callout-note
Things to learn from *tm_polygons()*:

-   The default interval binning used to draw the choropleth map is called "pretty". A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.

-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.

-   By default, Missing value will be shaded in grey.
:::

### 5.5 Drawing a Choropleth Map Using *tm_fill()* and *tm_border()*

Actually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

Firstly, we will try to draw a choropleth map by using `tm_fill()` alone.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

::: callout-note
Notice that the planning subzones are shared according to the respective dependecy values
:::

To add the boundary of the planning subzones, tm_borders will be used as shown below.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

::: callout-note
Notice that light-gray border lines have been added on the choropleth map.

The alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

Beside alpha argument, there are three other arguments for tm_borders(), they are:

-   col = border colour,

-   lwd = border line width. The default is 1, and

-   lty = border line type. The default is "solid".
:::

## 6.0 Data Classification Methods of tmap

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely:

-   *fixed*,

-   *sd*,

-   *equal*,

-   *pretty* (default),

-   *quantile*,

-   *kmeans*,

-   *hclust*,

-   *bclust*,

-   *fisher*, and

-   *jenks*.

### 6.1 Plotting Choropleth Maps with Built-in Classification Methods

To define a data classification method, the *style* argument of `tm_fill()` or `tm_polygons()` will be used. The code chunk below shows a quantile data classification that used 5 classes.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "Plasma",
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

Next, we will try equal data classification method.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "Plasma",
          style = "equal") +
  tm_borders(alpha = 0.5)
```

::: callout-note
Notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.
:::

Next, we will try other data classification methods.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "Plasma",
          style = "fisher") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "Plasma",
          style = "sd") +
  tm_borders(alpha = 0.5)
```

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "Plasma",
          style = "hclust") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "Plasma",
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

Also, we can try exploring using the same classification methods, but with different numbers of classes. As an example, we will use kmeans clustering method with different class sizes (2,6,10,20)

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          palette = "Plasma",
          style = "kmeans") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          palette = "Plasma",
          style = "kmeans") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          palette = "Plasma",
          style = "kmeans") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,
          palette = "Plasma",
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

### 6.2 Plotting Choropleth Maps with Custom Breaks

For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the `tm_fill()`. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).

Before we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points.

```{r warning=FALSE, message=FALSE}
summary(mpsz_pop2020$DEPENDENCY)

original <- ggplot(data=mpsz_pop2020, aes(x=`DEPENDENCY`)) +
  geom_bar(color="black", fill="#e9531e")+
  scale_x_binned(n.breaks=10)

#Try to remove outliers
mpsz_pop2020_no_outlier <- subset(mpsz_pop2020, mpsz_pop2020$DEPENDENCY <3)

filtered <- ggplot(data=mpsz_pop2020_no_outlier, aes(x=`DEPENDENCY`)) +
  geom_bar(color="black", fill="#e9531e")+
  scale_x_binned(n.breaks=10)

original + filtered
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 1.00. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

::: callout-note
**Why do we use the above-mentioned breaks?**

The reason behind choosing those break points is mainly stemmed from the 1st quantile and 3rd quantile of the datasets. While the minimum value is 0.10 and maximum value is 19.0, the 1st quantile (the value under which 25% of data points are found) is 0.7147 and the 3rd quantile (the value under which 75% of data points are found) is 0.8763. Using these two values, we may assume that the dataset might have outliers on the right end, and the majority of the dataset might be scattered in the range of 0.7147 and 0.8763. Hence, we use the mentioned break points.

Otherwise, we can use non-heuristic approach in this case as well. We can easily plot the data to see the distribution first (see above). As we assumed earlier, you can clearly see the outliers on the right-side of the histogram. After removing the outliers (temporarily), we can see the new plot (see above). Majority of the datasets are scattered within the range of 0.6 - 1.0. This is why we break the datasets into 0.6, 0.7, 0.8 and 0.9 respectively so that there is balanced quantity of data points in each break.
:::

Using this information, we will now proceed to plot the choropleth map.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          palette="Plasma",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

### 6.3 Customising Colour Schemes

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

To change the colour, we assign the preferred colour to *palette* argument of *tm_fill()* as shown in the code chunk below.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

## 7.0 Controlling and Customizing Map Layots

Map layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.

### 7.1 Map Legend

In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "DarkSunset", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            #legend.height = 0.45, 
            #legend.width = 0.35,
            legend.outside = TRUE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

### 7.2 Map Style

**tmap** allows a wide variety of layout settings to be changed. They can be called by using `tmap_style()`.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

### 7.3 Cartographic Furniture

Beside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

In the code chunk below, `tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add compass, scale bar and grid lines onto the choropleth map.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## 8.0 Drawing Small Multiple Choropleth Maps

**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by defining a group-by variable in `tm_facets()`, and

-   by creating multiple stand-alone maps with `tmap_arrange()`.

### 8.1 By assigning multiple values to at least one of the aesthetic arguments

In this example, small multiple choropleth maps are created by defining ***ncols*** in **`tm_fill()`**

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Plasma") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Plasma",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### 8.2 By defining a group-by variable in *tm_facets()*

In this example, multiple small choropleth maps are created by using **`tm_facets()`**

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Plasma",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### 8.3 By creating multiple stand-alone maps with *tmap_arrange()*

In this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **`tmap_arrange()`**.

```{r warning=FALSE, message=FALSE}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Purp")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Burg")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## 9.0 Mappping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth map, we can also use selection funtion to map spatial objects meeting the selection criterion.

For example, we have select the central region and *DEPENDENCY* column to plot.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Plasma", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## 10. References

Tutorial provided by Professor Kam Tin Seong, Singapore Management University

Reference: <https://r4gdsa.netlify.app/chap02.html>

### **10.1 All about tmap package**

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

### **10.2 Geospatial data wrangling**

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

### **10.3 Data wrangling**

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)
