---
title: "Hands-On Exercise 02"
description: |
 Thematic Mapping and GeoVisualisation with R
author:
  - name: Khant Min Naing
    url: https://www.linkedin.com/in/khantminnaing/
date: 01-12-2024
date-modified: "last-modified"
categories:
  - Hands-On Exercise
  - R
  - sf
  - tmap
output:
  distill::distill_article:
    code_folding: false
    toc: true
    self_contained: false
---

## 1.0 Overview

The main learning topics of today's hands-on exercise are thematic/choropleth mapping and other geospatial visualization techniques.

In general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.

Geovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human's most powerful information-processing abilities -- those of spatial cognition associated with our eye--brain vision system -- to be directly brought to bear.

In this exercise, we will explore how to plot functional and truthful choropleth maps by using `tmap` package.

## 2.0 Importing Packages

Before we start the exercise, we will need to import necessary R packages first. We will use the following packages:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

Since **`readr`**, **`tidyr`** and **`dplyr`** are part of **`tidyverse`** package, we will only need to install and import `tidyverse`.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## 3.0 Importing Datasets into R Environment

### 3.1 Datasets

In this exercise, we will use two datasets as follows:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### 3.2 Importing Geospatial Data into R

For geospatial data, we will use `st_read()` function of **sf** package to import shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn = "~/IS415-GAA/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
mpsz
```

### 3.3 Importing Aspatial (Attribute) Data into R

For aspatial datasets like *`respopagsex2011to2020.csv`,* we will import into Rstudio using `read_csv()` function of **readr** package.

```{r}
popdata <- read_csv("~/IS415-GAA/data/aspatial/respopagesextod2011to2020.csv")

```

## 4.0 Data Preparation and Wrangling

Before a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

### 4.1 Data Wrangling

In order to carry out necessary data wrangling and transformation, the following functions will be used:

-   `pivot_wider()` of **tidyr** package, and

-   `mutate()`, `filter()`, `group_by()` and `select()` of **dplyr** package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### 4.2 Joining Geospatial Data and Attribute Data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

Hence, we will standard the data values in these two fields.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, `left_join()` of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

## 5.0 Choropleth Mapping Geospatial Data Using *tmap*

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

### 5.1 **Plotting a choropleth map quickly by using *qtm()***

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.

```{r warning=FALSE, message=FALSE}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

### 5.2 **Plotting a choropleth map quickly by using *qtm()***

However, in real-life application, the quick choropleth map produced in the previous session may not be sufficient enough to properly visualize geospatial data. However, `tmap` packages allow us to customise and control how we design our choropleth maps. We will exploit **tmap**'s drawing elements to create a high quality cartographic choropleth map that includes more accurate and informative information.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Plasma",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Next, we will breakdown the different tmpa functions used to plot the additional elements in the map above.

### 5.3 Drawing a Base Map Using *tm_shape()*

The basic building block of **tmap** is `tm_shape()` followed by one or more layer elemments such as `tm_fill()` and `tm_polygons()`.

-   `tm_shape()` is used to define the input data (i.e *mpsz_pop2020*) and `tm_polygons()` is used to draw the planning subzone polygons.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```
::: callout-note
Things to learn from the code chunk above:

-   tmap_mode() with "plot" option is used to produce a static map. For interactive mode, "view" option should be used.

-   fill argument is used to map the attribute (i.e. DEPENDENCY)
:::

### 5.4 Drawing a Choropleth Map Using *tm_polygons()*

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to `tm_polygons()`.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```
::: callout-note
Things to learn from *tm_polygons()*:

-   The default interval binning used to draw the choropleth map is called "pretty". A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.

-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.

-   By default, Missing value will be shaded in grey.
:::

### 5.5 Drawing a Choropleth Map Using *tm_fill()* and *tm_border()*

Actually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

Firstly, we will try to draw a choropleth map by using `tm_fill()` alone.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```
::: callout-note
Notice that the planning subzones are shared according to the respective dependecy values
:::

To add the boundary of the planning subzones, tm_borders will be used as shown below.

```{r warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```
::: callout-note
Notice that light-gray border lines have been added on the choropleth map.

The alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

Beside alpha argument, there are three other arguments for tm_borders(), they are:

-   col = border colour,

-   lwd = border line width. The default is 1, and

-   lty = border line type. The default is "solid".
:::

## 6.0 Data Classification Methods of tmap

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely:

-   *fixed*,

-   *sd*,

-   *equal*,

-   *pretty* (default),

-   *quantile*,

-   *kmeans*,

-   *hclust*,

-   *bclust*,

-   *fisher*, and

-   *jenks*.

### 6.1 Plotting Choropleth Maps with Built-in Classification Methods

To define a data classification method, the *style* argument of `tm_fill()` or `tm_polygons()` will be used.
