---
title: "Hands-On Exercise 03"
description: |
 Spatial Point Pattern Analysis
author:
  - name: Khant Min Naing
    url: https://www.linkedin.com/in/khantminnaing/
date: 01-12-2024
date-modified: "last-modified"
categories:
  - In-Class Exercise
  - R
  - sf
  - lubridate
  - grab-posisi
format:
  html:  
    #code-fold: true
    code-summary: "Show the code"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
output:
  distill::distill_article:
    toc: true
    self_contained: false
---

# 1st and 2nd Order Spatial Point Patterns Analysis Methods

Spatial Point Pattern Analysis is the evaluation of the pattern, or distribution, of a set of points on a surface. It can refer to the actual spatial or temporal location of these points or also include data from point sources. It is one of the most fundamental concepts in geography and spatial analysis. This hands-on exercise will explore the basic concepts and methods of Spatial Point Pattern Analysis.

Particularly, we will explore using [spatstat](https://cran.r-project.org/web/packages/spatstat/), an R package specially designed for Spatial Point Pattern Analysis.

## 1.0 Overview

Today, we will use Spatial Point Pattern Analysis to analyse the spatial point processes of childcare centers in Singapore.

The specific questions we would like to address through this exercise are as follows:

-   Are the childcare centres in Singapore randomly distributed throughout the country?

-   Where are the locations with higher concentration of childcare centres?

## 2.0 Importing Packages

In this hands-on exercise, we will use the following R package:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e.Â raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse, devtools,sp)
```

## 3.0 Importing Datasets to R Environment

In this exercise, we will use the following datasets:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

### 3.1 Importing Geospatial Data

In this section, [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import the three geospatial data sets mentioned in previous section into R environment.

```{r}
childcare_sf <- st_read("../data/aspatial/child-care-services-geojson.geojson")%>% st_transform(crs =3414)

mpsz_sf <- st_read(dsn = "../data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")

sg_sf <- st_read(dsn = "../data/geospatial", layer="CostalOutline")

```

## 4.0 Geospatial Data Wrangling

### 4.1. Assigning Standard Coordinate Systems

```{r}
childcare_sf <- st_transform(childcare_sf, crs = 3414)
mpsz_sf <- st_transform(mpsz_sf, crs = 3414)
```

### 4.2 Mappoing Geospatial Datasets

After checking and assigning correct referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns. We will use `tmap` to create an interactive point symbol map.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

::: {.callout-tip title="Reflection"}
My original `tmap` version was 3.99 and `tmap_mode('view')` does not work with the version. Hence, we have to download an older version of `tmap` that is compatible with using the code chunk below:

`install_version("tmap", "3.3-4")`

While it is a good practice to keep the packages updated, some functions might be unavailable in certain package versions. Using the code chunk above, we can pull older or achieved versions of the R-packages and apply in our code.
:::

### 4.3 Converting the simple features to **spatstat's ppp (planar point pattern) object**

**spatstat** requires the analytical data in ***ppp*** object form. Hence we will convert `sf` objects to `ppp` objects using [`as.ppp()`](https://rdrr.io/pkg/spatstat.geom/man/as.ppp.html) function by providing the point coordinates and the observation window.

```{r}
childcare_ppp <- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))
plot(childcare_ppp)
```

Next, we will take a quick look at the summary statistics of the newly created ppp object.

```{r}
summary(childcare_ppp)
```

::: {.callout-tip title="Reflection"}
Notice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.
:::

### 4.4 Handling duplicated points

We can check the duplication in a ***ppp*** object by using the code chunk below.

```{r}
any(duplicated(childcare_ppp))
```

Since the above code chunk returns TRUE, we will use the `multiplicity()` function to count the number of co-indicence point.

```{r}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event, we can use `sum()`

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

The output shows that there are 885 duplicated point events.

To view the locations of these duplicate point events, we will plot `childcare` data by using the code chunk below.

```{r}
tmap_mode('view')
tm_shape(childcare_sf) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

::: {.callout-tip title="Reflection"}
**Can we spot the duplicate points from the map shown above?**

Yes, if we zoom in and look closely to the points, we may observe that some points has darker shade than others, despite using the same color for all points. Those points with darker shade may indicate the duplicated points, as a result of overlap.

![](images/Screenshot%202024-01-17%20at%203.15.35%20PM.png)
:::

**How do we overcome the issue of data duplicates?**

There are three ways to overcome this problem.

-   The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

-   The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

-   The third solution is to make each point "unique" and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

Next, we will check if there is still any duplicate points in our dataset. We will use `any(duplicated())` function to do so.

```{r}
any(duplicated(childcare_ppp_jit))
```

### 4.5 Creating `owin` (observation window) object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical observation boundary like Singapore boundary, for example. In **spatstat**, an object called ***owin*** is specially designed to represent a observation window.

Since we have imported the Singapore boundary in previous section, we will now convert the `sg_sf` object into an `owin` object.

```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
```

We will use `summary()` function to get summary information of this newly created `owin` object.

```{r}
summary(sg_owin)
```

### 4.6 Creating point events objects in owin Object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one `ppp` object class as shown below.

```{r}
summary(childcareSG_ppp)
plot(childcareSG_ppp)
```

## 5.0 1st Order Spatial Point Pattern Analysis

After data wrangling is complete, we will start to perform first-order spatial point pattern analysis using functions from `spatstat` package.

### 5.1 Kernel Density Estimation

**Kernel density estimation** (**KDE**) is the application of [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoothing "Kernel smoothing") for [probability density estimation](https://en.wikipedia.org/wiki/Probability_density_estimation "Probability density estimation"), i.e., a [non-parametric](https://en.wikipedia.org/wiki/Non-parametric_statistics "Non-parametric statistics") method to [estimate](https://en.wikipedia.org/wiki/Estimation "Estimation") the [probability density function](https://en.wikipedia.org/wiki/Probability_density_function "Probability density function") of a [random variable](https://en.wikipedia.org/wiki/Random_variable "Random variable") based on [*kernels*](https://en.wikipedia.org/wiki/Kernel_(statistics) "Kernel (statistics)") as [weights](https://en.wikipedia.org/wiki/Weight_function "Weight function").

In this session, we will compute the kernel density estimation (KDE) layers for childcare services in Singapore.

#### 5.1.1 Computing Kernel Density Estimation Using Automatic Bandwidth Selection Method

`density()` function of **spatstat** allows us to compute a kernel density for a given set of point events. Particularly, `bw.diggle()` argument can be used to automatically select a bandwidth for computing the kernel density.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian")
```

::: {.callout-tip title="Reflection"}
We can customise the code chunk above based on different congifurations required.

-   [`bw.diggle()`](https://search.r-project.org/CRAN/refmans/spatstat.explore/html/bw.diggle.html) (Cross Validated)is used for automatic bandwidth selection. Other methods such as [`bw.CvL()`](https://search.r-project.org/CRAN/refmans/spatstat.explore/html/bw.CvL.adaptive.html) (Cronie and van Lieshout's Criterion), [`bw.scott()`](https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/bw.scott)(Scott's Rule) or [`bw.ppl()`](https://search.r-project.org/CRAN/refmans/spatstat.explore/html/bw.pplHeat.html) (Likelihood Cross Validation)can also be used.

-   By default, the smoothing kernel used is `gaussian`. However, we can specify other smoothing methods such as: `epanechnikov`*,* `quartic`or `disc`.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.
:::

You can also retrieve the bandwidth used to compute the KDE layer.

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

Now, we will try to plot the kernel density derived from automatic bandwidth selection approach.

```{r}
plot(kde_childcareSG_bw)
```

Analyzing from the output map above, the density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of SVY21 is in meter. As a result, the density values computed is in "number of points per square meter". Hence, we need to rescale the value, which will be explored in next session.

#### 5.1.2 Rescaling KDE Layers

In this session, we will use `rescale()` function of **spatstat** package to covert the unit of measurement from meter to kilometer.

```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```

Now, we can try to re-run the same `density()` function we tried above, using the rescaled data set.

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

::: {.callout-tip title="Reflection"}
Notice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).
:::

### 5.2 Trying Different Bandwidth Selection Methods

As we have briefly explored different bandwidth selection methods available in **spatstat** package, we will now try out each of them and compare the resulting KDE layer, using the same dataset.

#### 5.2.1 Cronie and van Lieshout's Criterion for Bandwidth Selection for Kernel Density

```{r}
bw.CvL(childcareSG_ppp.km)
kde_childcareSG.bw.CvL <- density(childcareSG_ppp.km, sigma=bw.CvL, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw.CvL)
```

#### 5.2.2 **Scott's Rule for Bandwidth Selection for Kernel Density**

```{r}
bw.scott(childcareSG_ppp.km)
kde_childcareSG.bw.scott <- density(childcareSG_ppp.km, sigma=bw.scott, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw.scott)
```

#### 5.2.3 **Likelihood Cross Validation Bandwidth Selection for Kernel Density**

```{r}
bw.ppl(childcareSG_ppp.km)
kde_childcareSG.bw.ppl <- density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw.ppl)
```

#### 5.2.4 Comparing KDE Layers

```{r}
par(mfrow=c(2,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.bw.CvL, main = "bw.CvL")
plot(kde_childcareSG.bw.scott, main = "bw.scott")
plot(kde_childcareSG.bw.ppl, main = "bw.ppl")
```

::: {.callout-tip title="Reflection"}
**How do we know which approach to use?**

Baddeley et. (2016) suggested the use of the `bw.ppl()` algorithm because in their experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the `bw.diggle()` method seems to work best.
:::

### 5.3 Trying Different Kernel Smoothing Methods

As we explored briefly, the kernel method used in `density.ppp()`, by default, is `Gaussian`. But there are three other options, namely: `Epanechnikov`, `Quartic` and `Dics`.

![](images/Typical-kernel-functions-Four-typical-kernel-functions-used-in-the-manuscript-to-perform.png){fig-align="center" width="347"}

Now, we will take a look at how different smoothing methods work by comparing the resultant KDE layers as below.

```{r}
kde_childcareSG.gaussian <- density(childcareSG_ppp.km, 
                          sigma=bw.ppl, 
                          edge=TRUE, 
                          kernel="gaussian")


kde_childcareSG.epanechnikov <- density(childcareSG_ppp.km, 
                          sigma=bw.ppl, 
                          edge=TRUE, 
                          kernel="epanechnikov")
   
kde_childcareSG.quartic <- density(childcareSG_ppp.km, 
                          sigma=bw.ppl, 
                          edge=TRUE, 
                          kernel="quartic")
       
   
kde_childcareSG.disc <- density(childcareSG_ppp.km, 
                          sigma=bw.ppl, 
                          edge=TRUE, 
                          kernel="disc")
         
par(mfrow=c(2,2))  
plot(kde_childcareSG.gaussian, main="Gaussian")
plot(kde_childcareSG.epanechnikov, main="Epanechnikov")
plot(kde_childcareSG.quartic, main="Quartic")
plot(kde_childcareSG.disc, main="Disc")
```

### 5.4 Trying **Fixed and Adaptive KDE Calculation**

#### 5.4.1 **Computing KDE by Using Fixed Bandwidth**

In this session, generation of a Kernel Density Estimation (KDE) layer is performed by specifying a bandwidth of 600 meters. It is noteworthy that within the following code snippet, a sigma value of 0.6 is utilized. This choice is deliberate and corresponds to the unit of measurement employed in the `childcareSG_ppp.km` object, which is expressed in kilometers. Consequently, the representation of 600 meters in the KDE calculation is accurately denoted as 0.6 kilometers.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

#### 5.4.1 **Computing KDE by Using Adaptive Bandwidth**

When we used the fixed bandwidth, the result is very sensitive to highly skew distribution of spatial point patterns over across geographical units, such as the distinction between urban and rural areas. To address this inherent challenge, an alternative approach involves the adoption of an adaptive bandwidth.

To do so, we can use **`density.adaptive()`** from the spatstat package to compute adaptive kernel density estimation layer as follows.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")  
plot(kde_childcareSG_adaptive)
```

Now, we will compare the two output maps side-by-side.

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### 5.5 Converting **KDE output into Grid Object**

Conversion of KDE output into a grid object can be done to make it compatible with mapping applications. It is important to note that the result remains unchanged.

```{r, eval=FALSE}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

#### 5.5.1 Converting Grid Output into Raster

Next, we will convert the gridded kernal density objects into RasterLayer object by using *raster()* of **raster** package.

```{r, eval=FALSE}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
```

We will look at the properties of this new raster layer.

```{r, eval=FALSE}
kde_childcareSG_bw_raster
```

You will notice that the CRS information is missing in the raster layer output. Hence, we need to assign an appropriate CRS value to the layer before mapping.

```{r, eval=FALSE}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

### 5.6 Visualising KDE Layer Output in tmap

Finally, we will display the KDE raster layer in cartographic quality map using **tmap** package.

```{r, eval=FALSE}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v", palette="plasma") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

## 6.0 Comparing Spatial Point Patterns using KDE

### 6.1 Extracting Study Areas

The code chunk below will be used to extract the target planning areas.

```{r}
pg = mpsz_sf %>% filter(PLN_AREA_N == "PUNGGOL")
tm = mpsz_sf %>% filter(PLN_AREA_N == "TAMPINES")
bp = mpsz_sf %>% filter(PLN_AREA_N == "BUKIT PANJANG")
jw = mpsz_sf %>% filter(PLN_AREA_N == "JURONG WEST")
```

```{r}
par(mfrow=c(2,2))
plot(st_geometry(pg), main = "Punggol")
plot(st_geometry(tm), main = "Tampines")
plot(st_geometry(bp), main = "Bukit Panjang")
plot(st_geometry(jw), main = "Jurong West")
```

### 6.3 Creating Observation Windows

Now, we will convert these SpatialPolygons objects into owin objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
bp_owin = as.owin(bp)
jw_owin = as.owin(jw)

```

### 6.4 Combining childcare points and the study area

In this session, we will extract childcare that is within the specific region to do our analysis later on.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_bp_ppp = childcare_ppp_jit[bp_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, *rescale()* function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_bp_ppp.km = rescale(childcare_bp_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

Finally, we will plot the locations of the childcare centres in our selected 4 study areas.

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_bp_ppp.km, main="Bukit Panjang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

### 6.5 Computing KDE Layers

Once all the data wrangling is complete, we will follow the same method we explored in session 5 and plot KDE layers.

```{r}
par(mfrow=c(1,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")

par(mfrow=c(1,2))
plot(density(childcare_bp_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Bukit Panjang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

### 6.6 Computing fixed bandwidth KDE

```{r}
par(mfrow=c(1,2))
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")

par(mfrow=c(1,2))
plot(density(childcare_bp_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Bukit Panjang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

## 7.0 **Nearest Neighbour Analysis**

In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

### 7.1 **Testing spatial point patterns using Clark and Evans Test**

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

### 7.2 **Clark and Evans Test: Bukit Panjang Planning Area**

```{r}
clarkevans.test(childcare_bp_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## 8.0 2nd Order Spatial Point Patterns Analysis

### 8.1 Analysing Spatial Point Process Using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we will explore how to compute G-function estimation by using [Gest()](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. We will also explore how to perform monta carlo simulation test using [envelope()](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

#### 8.1.1 Computing G-Function Estimation

In this example, we will use Punggol Planning Area to compute G-function.

```{r}
G_PG = Gest(childcare_pg_ppp, correction= "border")
plot(G_PG, xlim=c(0,500))
```

#### 8.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   H~o~ = The distribution of childcare services at Punggol are randomly distributed.

-   H~1~= The distribution of childcare services at Punggol are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

To test our hypotheses, we will run a Monte Carlo simulation.

```{r}
G_PG.csr <- envelope(childcare_pg_ppp, Gest, nsim= 900)
```

Once the simulation is done, we will plot the results.

```{r}
plot(G_PG.csr)
```

### 8.1.3 Tampines Planning Area

We will carry out the same procedure above for Tampines planning area as well

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
plot(G_tm.csr)
```

### 8.2 Analysing Spatial Point Process Using F-Function

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will explore how to compute F-function estimation by using [Fest()](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package.

#### 8.2.1 Computing F-Function Estimation

In this example, we will use Jurong West Planning Area to compute F-function.

```{r}
F_JW = Fest(childcare_jw_ppp)
plot(F_JW)
```

#### 8.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   H~o~ = The distribution of childcare services at Jurong West are randomly distributed.

-   H~1~= The distribution of childcare services at Jurong West are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

To test our hypotheses, we will run a Monte Carlo simulation.

```{r}
F_JW.csr <- envelope(childcare_jw_ppp, Fest, nsim = 999)

```

Once the simulation is done, we will plot the results.

```{r}
plot(F_JW.csr)
```

### 8.3 Analysing Spatial Point Process Using K-Function

K-function measures the number of events found up to a given distance of any particular event. In this section, we will learn how to compute K-function estimates by using [Kest()](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package.

#### 8.3.1 Computing K-Function Estimation

In this example, we will use Bukit Panjang Planning Area to compute F-function.

```{r}
K_bp = Kest(childcare_bp_ppp, correction = "Ripley")
plot(K_bp, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

#### 8.3.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   H~o~ = The distribution of childcare services at Bukit Panjang are randomly distributed.

-   H~1~= The distribution of childcare services at Bukit Panjang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

To test our hypotheses, we will run a Monte Carlo simulation.

```{r}
K_BP.csr <- envelope(childcare_bp_ppp, Fest, nsim = 999)

```

Once the simulation is done, we will plot the results.

```{r}
plot(K_BP.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### 8.4 Analysing Spatial Point Process Using K-Function

K-function measures the number of events found up to a given distance of any particular event. In this section, we will learn how to compute K-function estimates by using [Kest()](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package.

#### 8.4.1 Computing L-Function Estimation

In this example, we will use Tampines Planning Area to compute L-function.

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

#### 8.4.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   H~o~ = The distribution of childcare services at Tampines are randomly distributed.

-   H~1~= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

To test our hypotheses, we will run a Monte Carlo simulation.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

Once the simulation is done, we will plot the results.

```{r}
plot(L_tm.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```
