---
title: "Hands-On Exercise 03"
description: |
 Spatial Point Pattern Analysis
author:
  - name: Khant Min Naing
    url: https://www.linkedin.com/in/khantminnaing/
date: 01-12-2024
date-modified: "last-modified"
categories:
  - In-Class Exercise
  - R
  - sf
  - lubridate
  - grab-posisi
format:
  html:  
    #code-fold: true
    code-summary: "Show the code"
execute: 
  eval: true
  echo: true
  warning: false
output:
  distill::distill_article:
    toc: true
    self_contained: false
---

# 1st and 2nd Order Spatial Point Patterns Analysis Methods

Spatial Point Pattern Analysis is the evaluation of the pattern, or distribution, of a set of points on a surface. It can refer to the actual spatial or temporal location of these points or also include data from point sources. It is one of the most fundamental concepts in geography and spatial analysis. This hands-on exercise will explore the basic concepts and methods of Spatial Point Pattern Analysis.

Particularly, we will explore using [spatstat](https://cran.r-project.org/web/packages/spatstat/), an R package specially designed for Spatial Point Pattern Analysis.

## 1.0 Overview

Today, we will use Spatial Point Pattern Analysis to analyse the spatial point processes of childcare centers in Singapore.

The specific questions we would like to address through this exercise are as follows:

-   Are the childcare centres in Singapore randomly distributed throughout the country?

-   Where are the locations with higher concentration of childcare centres?

## 2.0 Importing Packages

In this hands-on exercise, we will use the following R package:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e.Â raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, devtools)
```

## 3.0 Importing Datasets to R Environment

In this exercise, we will use the following datasets:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

### 3.1 Importing Geospatial Data

In this section, [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import the three geospatial data sets mentioned in previous section into R environment.

```{r}
childcare_sf <- st_read("~/IS415-GAA/data/aspatial/child-care-services-geojson.geojson")

mpsz_sf <- st_read(dsn = "~/IS415-GAA/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

## 4.0 Geospatial Data Wrangling

### 4.1. Assigning Stanadrd Coordinate Systems

```{r}
childcare_sf <- st_transform(childcare_sf, crs = 3414)
mpsz_sf <- st_transform(mpsz_sf, crs = 3414)
```

### 4.2 Mappoing Geospatial Datasets

After checking and assigning correct referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns. We will use `tmap` to create an interactive point symbol map.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

::: {.callout-tip title="Reflection"}
My original `tmap` version was 3.99 and `tmap_mode('view')` does not work with the version. Hence, we have to download an older version of `tmap` that is compatible with using the code chunk below:

`install_version("tmap", "3.3-4")`

While it is a good practice to keep the packages updated, some functions might be unavailable in certain package versions. Using the code chunk above, we can pull older or achieved versions of the R-packages and apply in our code.
:::

### 4.3 Converting the simple features to **spatstat's ppp format**

**spatstat** requires the analytical data in ***ppp*** object form. Hence we will convert `sf` objects to `ppp` objects using [`as.ppp()`](https://rdrr.io/pkg/spatstat.geom/man/as.ppp.html) function by providing the point coordinates and the observation window.

```{r}
childcare_ppp <- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))
plot(childcare_ppp)
```

Next, we will take a quick look at the summary statistics of the newly created ppp object.

```{r}
summary(childcare_ppp)
```

::: {.callout-tip title="Reflection"}
Notice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.
:::

### 4.4 Handling duplicated points

We can check the duplication in a ***ppp*** object by using the code chunk below.

```{r}
any(duplicated(childcare_ppp))
```

Since the above code chunk returns TRUE, we will use the `multiplicity()` function to count the number of co-indicence point.

```{r}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event, we can use `sum()`

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

The output shows that there are 885 duplicated point events.

To view the locations of these duplicate point events, we will plot `childcare` data by using the code chunk below.

```{r}
tmap_mode('view')
tm_shape(childcare_sf) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

::: {.callout-tip title="Reflection"}
**Can we spot the duplicate points from the map shown above?**

Yes, if we zoom in and look closely to the points, we may observe that some points has darker shade than others, despite using the same color for all points. Those points with darker shade may indicate the duplicated points, as a result of overlap.

![](images/Screenshot%202024-01-17%20at%203.15.35%20PM.png)
:::

**How do we overcome the issue of data duplicates?**

There are three ways to overcome this problem.

-   The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

-   The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

-   The third solution is to make each point "unique" and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

## 1st Order Spatial Point Pattern Analysis
