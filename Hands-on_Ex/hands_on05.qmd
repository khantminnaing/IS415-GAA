---
title: "Hands-On Exercise 05"
description: |
 Global and Local Measures of Spatial Autocorrelation
author:
  - name: Khant Min Naing
    url: https://www.linkedin.com/in/khantminnaing/
date: 02-01-2024
date-modified: "last-modified"
categories:
  - In-Class Exercise
  - R
  - spdep
format:
  html:  
    code-summary: "Show the code"
execute: 
  eval: true
  echo: true
  warning: false
output:
  distill::distill_article:
    toc: true
    self_contained: false
---

# Global and Local Measures of Spatial Autocorrelation

## 1.0 Overview

"The first law of geography: Everything is related to everything else, but near things are more related than distant things." Waldo R. Tobler (Tobler, 1970). Spatial autocorrelation is the term used to describe the presence of systematic spatial variation in a variable. The variable can assume values either:

-   at any point on a continuous surface (such as land use type or annual precipitation levels in a region); 

-   at a set of fixed sites located within a region (such as prices at a set of retail outlets); or 

-   across a set of areas that subdivide a region (such as the count or proportion of households with two or more cars in a set of Census tracts that divide an urban region). 

Where adjacent observations have similar data values the map shows positive spatial autocorrelation. Where adjacent observations tend to have very contrasting values then the map shows negative spatial autocorrelation. Spatial autocorrelation in a variable can be exogenous or endogenous. Spatial autocorrelation may arise from any one of the following situations (Haining, 2001):  

1.  the difference between the scale of variation of a phenomenon and the scale of the spatial framework used to capture or represent that variation;
2.  measurement error;
3.  spatial diffusion, spillover, interaction, and dispersal processes;
4.  inheritance by one variable through causal association with another;
5.  model misspecification 

In this hands-on exercise, we will explore how to compute Global and Local Measures of Spatial Autocorrelation by using **spdep** package.

### 1.1 Analytical Objective

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be "is there sign of spatial clustering?". And, if the answer for this question is yes, then our next question will be "where are these clusters?"

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice](https://en.wikipedia.org/wiki/Hunan), People Republic of China.

## 2.0 Importing Packages

In this hands-on exercise, we will use the following R package:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spdep**](https://cran.r-project.org/web/packages/spdep/index.html) for computing spatial weights, global and local spatial autocorrelation statistics

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

-   [**tidyverse**](https://www.tidyverse.org/)for wrangling attribute data in R

-   **knitr**

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 3.0 Importing Datasets to R Environment

In this exercise, we will use the following datasets:

-   `Hunan` province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   `Hunan_2012.csv` This csv file contains selected Hunan's local development indicators in 2012.

### 3.1 Importing Geospatial Data

In this section, `st_read()` of **sf** package will be used to import the three geospatial data sets mentioned in previous section into R environment.

```{r}
hunan <- st_read(dsn = "../data/geospatial", 
                 layer = "Hunan")
```

### 3.1 Importing Aspatial Data

In this section, `read_csv()` of **sf** package will be used to import the csv file into R environment. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("../data/aspatial/Hunan_2012.csv")
hunan2012
```

## 4.0 Geospatial Data Wrangling

### 4.1. Performing Relational Joint

In previous section, we have imported a shapefile `hunan` representing the geographical boundaries of Hunan and a dataframe `hunan2012` which contains the attribute fields corresponding to counties in `Hunan`.

The next step in our analysis involves updating the attribute table of the `hunan` shapefile with the values from `hunan2012`.

Hence, we will need to update the attribute table of `Hunan` by using `left_join()` of dplyr package. This function effectively merges the two datasets, ensuring that each county's geographical data is accurately linked with its corresponding attribute data from the **`hunan2012`** dataframe.

```{r}
hunan <- left_join(hunan,hunan2012, join_by(County))%>%
  select(1:4, 7, 15)
```

### 4.2 Visualising Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using `qtm()` of **tmap** package.

```{r}
#| fig-width: 10
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          palette="plasma",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          palette="plasma",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## 5.0 Global Measures of Spatial Autocorrelation

Moran's I and Geary's c are well known tests for spatial autocorrelation. They represent two special cases of the general cross-product statistic that measures spatial autocorrelation. Moran's I is produced by standardizing the spatial autocovariance by the variance of the data. Geary's c uses the sum of the squared differences between pairs of data values as its measure of covariation. Both statistics depend on a spatial structural specification such as a spatial weights matrix or a distance related decline function. 

In this section, we will explore how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation in R environment.

### 5.1 Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

::: {.callout-tip title="Reflection"}
The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.
:::

### 5.2 Row-Standardised Weights Matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

::: {.callout-tip title="Reflection"}
**Let's breakdown the code chunk above!**

-   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.
:::

### 5.3 Global **Measures of Spatial Autocorrelation: Moran's I**

In this section, we will explore how to perform Moran's I statistics testing by using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep** package in R environment.

#### 5.3.1 Moran's Test

The code chunk below performs Moran's I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

::: {.callout-tip title="Reflection"}
**What statistical conclusion can we draw from the output above?**

-   The Moran's I statistic is **0.300749970**, which is significantly different from the expectation under the null hypothesis of **-0.011494253**. This suggests that there is a significant spatial autocorrelation in the data.

-   The standard deviate of the Moran's I statistic is **4.7351**. This is the value of the Moran's I statistic standardized to have zero mean and unit variance under the null hypothesis.

-   The p-value is **1.095e-06**, which is less than 0.05, indicating that the spatial pattern observed is very unlikely to be the result of random chance. Therefore, we reject the null hypothesis of no spatial autocorrelation.

-   The alternative hypothesis is 'greater', suggesting that the test is one-sided and the observed pattern is more clustered than would be expected under the null hypothesis of spatial randomness.

In conclusion, the test suggests that there is significant positive spatial autocorrelation in the **`hunan$GDPPC`** data. This means that areas with similar values of **`GDPPC`** are more likely to be located near each other than would be expected if the data were randomly distributed
:::

#### 5.3.2 **Computing Monte Carlo Moran's I**

The code chunk below performs permutation test for Moran's I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

::: {.callout-tip title="Reflection"}
**What statistical conclusion can we draw from the output above?**

-   The Moran's I statistic is **0.30075**, which is the same as in our previous test (See Section 5.3.1).

-   The p-value is **0.001**, which is less than 0.05, indicating that the spatial pattern observed is very unlikely to be the result of random chance. Therefore, we reject the null hypothesis of no spatial autocorrelation.In conclusion, the test suggests that there is significant positive spatial autocorrelation in the **`hunan$GDPPC`** data. This means that areas with similar values of **`GDPPC`** are more likely to be located near each other than would be expected if the data were randomly distributed

In conclusion, the Monte Carlo simulation confirms the results of the previous Moran's I test. There is significant positive spatial autocorrelation in the **`hunan$GDPPC`** data. This means that areas with similar values of **`GDPPC`** are more likely to be located near each other than would be expected if the data were randomly distributed.
:::

#### 5.3.3 **Visualising Monte Carlo Moran's I**

It is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])

hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

::: {.callout-tip title="Reflection"}
**What statistical conclusion can we draw from the output above?**

-   The mean of the simulated Moran's I statistics is **-0.01504572**. This is close to zero, which is what we would expect under the null hypothesis of spatial randomness.

-   The variance of the simulated Moran's I statistics is **0.004371574**. This gives us an idea of the spread of the Moran's I statistics under the null hypothesis.

-   The minimum and maximum of the simulated Moran's I statistics are **-0.18339** and **0.27593**, respectively. This gives us the range of Moran's I statistics that we might expect to see by chance alone.

-   The 1st quartile, median, and 3rd quartile are **-0.06168**, **-0.02125**, and **0.02611**, respectively. These give us more detailed information about the distribution of the Moran's I statistics under the null hypothesis.

The histogram provide a visual representation of this distribution, with a vertical red line at 0 to represent the expected value under the null hypothesis.
:::

Alternatively, we can also run a similar plot using `ggplot2` package.

```{r}
# Create a data frame with the simulated Moran's I values
df <- data.frame(MoranI = bperm$res[1:999])

# Create the histogram
ggplot(df, aes(x = MoranI)) +
  geom_histogram(bins = 20, fill = "grey", color = "black") +
  geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") +
  xlab("Simulated Moran's I") +
  ylab("Frequency") +
  ggtitle("Histogram of Simulated Moran's I")
```

### 5.4 **Global Measures of Spatial Autocorrelation: Geary's C**

In this section, we will learn how to perform Geary's C statistics testing by using appropriate functions of **spdep** package.

#### 5.4.1 **Geary's C test**

The code chunk below performs Geary's C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

::: {.callout-tip title="Reflection"}
**What statistical conclusion can we draw from the output above?**

-   he Geary's C statistic is **0.6907223**, which is significantly different from the expectation under the null hypothesis of **1.0000000**. This suggests that there is a significant local spatial structure in the data.

-   The standard deviate of the Geary's C statistic is **3.6108**. This is the value of the Geary's C statistic standardized to have zero mean and unit variance under the null hypothesis.

-   The p-value is **0.0001526**, which is less than 0.05, indicating that the spatial pattern observed is very unlikely to be the result of random chance. Therefore, we reject the null hypothesis of no spatial autocorrelation.

-   The alternative hypothesis is 'Expectation greater than statistic', suggesting that the test is one-sided and the observed pattern is more clustered than would be expected under the null hypothesis of spatial randomness.

In conclusion, the test suggests that there is significant positive global spatial autocorrelation in the **`hunan$GDPPC`** data. This means that areas with similar values of **`GDPPC`** are more likely to be located near each other than would be expected if the data were randomly distributed.
:::

#### 5.4.2 **Computing Monte Carlo Geary's C**

The code chunk below performs permutation test for Geary's C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

::: {.callout-tip title="Reflection"}
**What statistical conclusion can we draw from the output above?**

-   The Geary's C statistic is **0.69072**, which is the same as in your previous test.

-   The p-value is **0.001**, which is less than 0.05, indicating that the spatial pattern observed is very unlikely to be the result of random chance. Therefore, we reject the null hypothesis of no spatial autocorrelation.

In conclusion, the Monte Carlo simulation confirms the results of the previous Geary's C test. There is significant positive global spatial autocorrelation in the **`hunan$GDPPC`** data. This means that areas with similar values of **`GDPPC`** are more likely to be located near each other than would be expected if the data were randomly distributed.
:::

#### 5.4.3 **Visualising the Monte Carlo Geary's C**

Similart to what we did in Moran's I test, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red")
```

::: {.callout-tip title="Reflection"}
**What statistical conclusion can we draw from the output above?**

-   The mean of the simulated Geary's C statistics is **1.004402**. This is close to 1, which is what we would expect under the null hypothesis of spatial randomness.

-   The variance of the simulated Geary's C statistics is **0.007436493**. This gives us an idea of the spread of the Geary's C statistics under the null hypothesis.

-   The minimum and maximum of the simulated Geary's C statistics are **0.7142** and **1.2722**, respectively. This gives us the range of Geary's C statistics that we might expect to see by chance alone.

-   The 1st quartile, median, and 3rd quartile are **0.9502**, **1.0052**, and **1.0595**, respectively. These give us more detailed information about the distribution of the Geary's C statistics under the null hypothesis.

The histogram provide a visual representation of this distribution, with a vertical red line at Geary's C = 1 represents the expected value under the null hypothesis of no spatial autocorrelation.
:::

## 6.0 **Spatial Correlogram for Global Spatial Autocorrelation Statistics**

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### 6.1 **Compute Moran's I correlogram**

In the code chunk below, [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

::: {.callout-tip title="Reflection"}
**What statistical conclusion can we draw from the output above?**

In the output above, the Moran's I statistic for each lag (1 to 6) is given along with its expectation under the null hypothesis of spatial randomness, variance, standard deviate, and p-value.

-   The p-values are all less than 0.05 for lags **1, 2, 3, 5**, and **6**, indicating that the spatial autocorrelation at these distances is statistically significant. For lag **4**, however, the p-value is greater than 0.05, indicating that the spatial autocorrelation at this distance is not statistically significant.

-   The Moran's I statistic is positive for lags **1** to **4**, indicating positive spatial autocorrelation at these distances (i.e., areas with similar values of **`GDPPC`** are more likely to be located near each other). For lags 5 and 6, the Moran's I statistic is negative, indicating negative spatial autocorrelation at these distances (i.e., areas with similar values of **`GDPPC`** are more likely to be located far from each other).
:::

### 6.2 **Compute Geary's C correlogram**

In the code chunk below, `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Similar to the previous step, we will print out the analysis report by using the code chunk below.

```{r}
print(GC_corr)
```

::: {.callout-tip title="Reflection"}
**What statistical conclusion can we draw from the output above?**

In the output above, the Geary's C statistic for each lag (1 to 6) is given along with its expectation under the null hypothesis of spatial randomness, variance, standard deviate, and p-value.

-   The p-values are all less than 0.05 for lags **1, 2,** and **5**, indicating that the spatial autocorrelation at these distances is statistically significant. For lags **3**, **4**, and **6**, however, the p-values are greater than 0.05, indicating that the spatial autocorrelation at these distances is not statistically significant.

-   The Geary's C statistic is less than 1 for lags **1, 2,** and **3**, indicating positive spatial autocorrelation at these distances (i.e., areas with similar values of **`GDPPC`** are more likely to be located near each other). For lags **4**, **5**, and **6**, the Geary's C statistic is greater than 1, indicating negative spatial autocorrelation at these distances (i.e., areas with similar values of **`GDPPC`** are more likely to be located far from each other).
:::

## 7.0 Local Measures of Spatial Autocorrelation

Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.

In this section, we will explore how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran'I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.

### 7.1 **Computing local Moran's I**

To compute local Moran's I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

The code chunks below are used to compute local Moran's I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   `Ii`: the local Moran's I statistics

-   `E.Ii`: the expectation of local moran statistic under the randomisation hypothesis

-   `Var.Ii`: the variance of local moran statistic under the randomisation hypothesis

-   `Z.Ii`:the standard deviate of local moran statistic

-   `Pr(z != E(Ii))`: the p-value of local moran statistic

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```

### 7.2 Mapping the local Moran's I

Before mapping the local Moran's I map, it is wise to append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called `hunan.localMI`.

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

Using choropleth mapping functions of **tmap** package, we can plot the local Moran's I values by using the code chinks below.

```{r}
#| fig-width: 10
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "-plasma",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

The choropleth shown above is evidence for both positive and negative `Ii` values. However, it is useful to consider the p-values for each of these values. The code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package.

```{r}
#| fig-width: 10
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="plasma", 
          title = "local moran's I p-values") +
  tm_borders(alpha = 0.5)
```

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
#| fig-width: 10

localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "-plasma",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="plasma", 
          title = "local moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## 8.0 **Creating a LISA Cluster Map**

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### 8.1 **Plotting Moran scatterplot**

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [`moran.plot()`](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

::: {.callout-tip title="Reflection"}
Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.
:::

### 8.2 **Plotting Moran scatterplot with standardised variable**

Next, we will plot Moran scatterplot with standardised variables. First we will use [`scale()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

::: {.callout-tip title="Reflection"}
The [`as.vector()`](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.
:::

Now, we are ready to plot the Moran scatterplot again by using the code chunk below.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### 8.3 **Preparing LISA map classes**

Now that we have tried plotting Moran scatterplot, we will proceed to carry out necessary steps for preparing LISA maps. The code chunks below show the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
```

This is follow by centering the local Moran's around the mean.

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Next, we will set a statistical significance level for the local Moran.

```{r}
signif <- 0.05       
```

These four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      
```

Lastly, places non-significant Moran in the category 0.

```{r}
quadrant[localMI[,5]>signif] <- 0
```

### 8.4 Plotting LISA Map

Now that we have prepared all necessary steps, we can build the LISA map by using the code chunks below.

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#e9e9e9", "#eff635", "#61adab", "#5071ea", "#4225df")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          title = "LISA classes",
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
#| fig-width: 10
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#e9e9e9", "#eff635", "#61adab", "#5071ea", "#4225df")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant",
          title = "LISA classes",
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

We can also include the local Moran's I map and p-value map as shown below for easy comparison.

```{r}
#| fig-width: 10
tmap_arrange(gdppc, LISAmap,localMI.map, pvalue.map, asp=2, ncol=2)
```

## 9.0 **Hot Spot and Cold Spot Area Analysis**

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas. The term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

### 9.1 **Getis and Ord's G-Statistics**

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). Getis-Ord Global G statistic is concerned with the overall concentration or lack of concentration in all pairs that are neighbours given the definition of neighbouring areas. It measures the degree of association that results from the concentration of weighted points (or area represented by a weighted point) and all other weighted points included within a radius of distance d from the original weighted point. It identifies areas where high or low cluster in space. 

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

#### 9.1.1 **Deriving distance-based weight matrix**

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

#### 9.1.1 **Deriving the centroid**

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running `st_centroid()` on the sf object: **us.bound**. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be `st_centroid()`. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the `st_centroid()` function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

#### 9.1.2 **Deriving the** the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below.

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [`knearneigh()`](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [`knn2nb()`](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [`nbdists()`](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**`unlist()`**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

#### 9.1.3 Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using [`dnearneigh()`](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, `nb2listw()` is used to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

#### 9.1.4 Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, `nb2listw()` is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

### 9.2 **Computing Getis i statistics**

#### 9.2.1 **Gi statistics using fixed distance**

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

::: {.callout-tip title="Reflection"}
The output of localG() is a vector of G or Gstar values, with attributes "gstari" set to TRUE or FALSE, "call" set to the function call, and class "localG".

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.
:::

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

::: {.callout-tip title="Reflection"}
the code chunk above performs three tasks. First, it convert the output vector `gi.fixed` into r matrix object by using `as.matrix()`. Next, `cbind()` is used to join hunan\@data and `gi.fixed` matrix to produce a new SpatialPolygonDataFrame called `hunan.gi`. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using `rename()`.
:::

#### 9.2.1 **Mapping Gi values with fixed distance weights**

It is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
#| fig-width: 10
gdppc <- tm_shape(hunan) +
  tm_fill("GDPPC",
          palette="plasma",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-plasma",
          title = "local Gi (fixed)") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

#### 9.2.3 **Gi statistics using adaptive distance**

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e `knb_lw`).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

#### 9.2.4 **Mapping Gi values with adaptive distance weights**

It is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
#| fig-width: 10

gdppc <- tm_shape(hunan) +
  tm_fill("GDPPC",
          palette="plasma",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)

Gimap_adaptive <-tm_shape(hunan.gi) +
  tm_fill("gstat_adaptive", 
          style = "pretty",
          palette="-plasma",
          title = "local Gi (adaptive)") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap_adaptive, asp=1, ncol=2)
```

#### 9.2.4 **Comparison of fixed adaptive distance weighted Gi Maps**

```{r}
#| fig-width: 10

tmap_arrange(Gimap, Gimap_adaptive, asp=1, ncol=2)
```
